
Sign2Sound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005f7c  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080088e8  080088e8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088e8  080088e8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080088f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf0  20000058  08008948  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c48  08008948  00020c48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020d1  00000000  00000000  00020142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009c4  00000000  00000000  00022213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  00022bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d75  00000000  00000000  00022f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003941  00000000  00000000  0003cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c9c0  00000000  00000000  000405ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000024b  00000000  00000000  000dcf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f2c  00000000  00000000  000dd1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000de108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000058 	.word	0x20000058
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002954 	.word	0x08002954

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000005c 	.word	0x2000005c
 8000100:	08002954 	.word	0x08002954

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <nano_wait>:
#define SPI SPI1

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	1c18      	adds	r0, r3, #0

08000410 <repeat>:
 8000410:	3853      	subs	r0, #83	; 0x53
 8000412:	dcfd      	bgt.n	8000410 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <LCD_Reset>:

void LCD_Reset(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    lcddev.reset(1);      // Assert reset
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <LCD_Reset+0x2c>)
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	2001      	movs	r0, #1
 8000426:	4798      	blx	r3
    nano_wait(100000000); // Wait
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <LCD_Reset+0x30>)
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ffea 	bl	8000404 <nano_wait>
    lcddev.reset(0);      // De-assert reset
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <LCD_Reset+0x2c>)
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	2000      	movs	r0, #0
 8000436:	4798      	blx	r3
    nano_wait(50000000);  // Wait
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <LCD_Reset+0x34>)
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ffe2 	bl	8000404 <nano_wait>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000adc 	.word	0x20000adc
 800044c:	05f5e100 	.word	0x05f5e100
 8000450:	02faf080 	.word	0x02faf080

08000454 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	0002      	movs	r2, r0
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <LCD_WR_REG+0x30>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	4013      	ands	r3, r2
 800046a:	d1fa      	bne.n	8000462 <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <LCD_WR_REG+0x34>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	2001      	movs	r0, #1
 8000472:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <LCD_WR_REG+0x38>)
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	7013      	strb	r3, [r2, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40013000 	.word	0x40013000
 8000488:	20000adc 	.word	0x20000adc
 800048c:	4001300c 	.word	0x4001300c

08000490 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	0002      	movs	r2, r0
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <LCD_WR_DATA+0x30>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	4013      	ands	r3, r2
 80004a6:	d1fa      	bne.n	800049e <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <LCD_WR_DATA+0x34>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	2000      	movs	r0, #0
 80004ae:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <LCD_WR_DATA+0x38>)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	7013      	strb	r3, [r2, #0]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40013000 	.word	0x40013000
 80004c4:	20000adc 	.word	0x20000adc
 80004c8:	4001300c 	.word	0x4001300c

080004cc <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LCD_WriteData16_Prepare+0x20>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	2000      	movs	r0, #0
 80004d6:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LCD_WriteData16_Prepare+0x24>)
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <LCD_WriteData16_Prepare+0x24>)
 80004de:	21f0      	movs	r1, #240	; 0xf0
 80004e0:	0109      	lsls	r1, r1, #4
 80004e2:	430a      	orrs	r2, r1
 80004e4:	605a      	str	r2, [r3, #4]
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000adc 	.word	0x20000adc
 80004f0:	40013000 	.word	0x40013000

080004f4 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <LCD_WriteData16+0x28>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	2202      	movs	r2, #2
 8000508:	4013      	ands	r3, r2
 800050a:	d0fa      	beq.n	8000502 <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <LCD_WriteData16+0x28>)
 800050e:	1dba      	adds	r2, r7, #6
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	60da      	str	r2, [r3, #12]
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013000 	.word	0x40013000

08000520 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LCD_WriteData16_End+0x18>)
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <LCD_WriteData16_End+0x18>)
 800052a:	4904      	ldr	r1, [pc, #16]	; (800053c <LCD_WriteData16_End+0x1c>)
 800052c:	400a      	ands	r2, r1
 800052e:	605a      	str	r2, [r3, #4]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40013000 	.word	0x40013000
 800053c:	fffff0ff 	.word	0xfffff0ff

08000540 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	1c0a      	adds	r2, r1, #0
 8000550:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff ff7c 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ff94 	bl	8000490 <LCD_WR_DATA>
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}

08000570 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <LCD_WriteRAM_Prepare+0x18>)
 8000576:	891b      	ldrh	r3, [r3, #8]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ff6a 	bl	8000454 <LCD_WR_REG>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000adc 	.word	0x20000adc

0800058c <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <LCD_direction+0xa4>)
 800059a:	222a      	movs	r2, #42	; 0x2a
 800059c:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <LCD_direction+0xa4>)
 80005a0:	222b      	movs	r2, #43	; 0x2b
 80005a2:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <LCD_direction+0xa4>)
 80005a6:	222c      	movs	r2, #44	; 0x2c
 80005a8:	811a      	strh	r2, [r3, #8]
    switch(direction){
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d02c      	beq.n	800060c <LCD_direction+0x80>
 80005b2:	dc37      	bgt.n	8000624 <LCD_direction+0x98>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d01d      	beq.n	80005f4 <LCD_direction+0x68>
 80005b8:	dc34      	bgt.n	8000624 <LCD_direction+0x98>
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <LCD_direction+0x38>
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00c      	beq.n	80005dc <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 80005c2:	e02f      	b.n	8000624 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <LCD_direction+0xa4>)
 80005c6:	22f0      	movs	r2, #240	; 0xf0
 80005c8:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <LCD_direction+0xa4>)
 80005cc:	22a0      	movs	r2, #160	; 0xa0
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80005d2:	2108      	movs	r1, #8
 80005d4:	2036      	movs	r0, #54	; 0x36
 80005d6:	f7ff ffb3 	bl	8000540 <LCD_WriteReg>
        break;
 80005da:	e024      	b.n	8000626 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <LCD_direction+0xa4>)
 80005de:	22a0      	movs	r2, #160	; 0xa0
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <LCD_direction+0xa4>)
 80005e6:	22f0      	movs	r2, #240	; 0xf0
 80005e8:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80005ea:	2168      	movs	r1, #104	; 0x68
 80005ec:	2036      	movs	r0, #54	; 0x36
 80005ee:	f7ff ffa7 	bl	8000540 <LCD_WriteReg>
        break;
 80005f2:	e018      	b.n	8000626 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <LCD_direction+0xa4>)
 80005f6:	22f0      	movs	r2, #240	; 0xf0
 80005f8:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <LCD_direction+0xa4>)
 80005fc:	22a0      	movs	r2, #160	; 0xa0
 80005fe:	0052      	lsls	r2, r2, #1
 8000600:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8000602:	21c8      	movs	r1, #200	; 0xc8
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff9b 	bl	8000540 <LCD_WriteReg>
        break;
 800060a:	e00c      	b.n	8000626 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <LCD_direction+0xa4>)
 800060e:	22a0      	movs	r2, #160	; 0xa0
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <LCD_direction+0xa4>)
 8000616:	22f0      	movs	r2, #240	; 0xf0
 8000618:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800061a:	21a8      	movs	r1, #168	; 0xa8
 800061c:	2036      	movs	r0, #54	; 0x36
 800061e:	f7ff ff8f 	bl	8000540 <LCD_WriteReg>
        break;
 8000622:	e000      	b.n	8000626 <LCD_direction+0x9a>
    default:break;
 8000624:	46c0      	nop			; (mov r8, r8)
    }
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000adc 	.word	0x20000adc

08000634 <tft_select>:

static void tft_select(int val)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10a      	bne.n	8000658 <tft_select+0x24>
        while(SPI1->SR & SPI_SR_BSY)
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <tft_select+0x44>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4013      	ands	r3, r2
 800064c:	d1fa      	bne.n	8000644 <tft_select+0x10>
            ;
        GPIOB->BSRR = 1<<10;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <tft_select+0x48>)
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	00d2      	lsls	r2, r2, #3
 8000654:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        GPIOB->BRR = 1<<10;
    }
}
 8000656:	e00a      	b.n	800066e <tft_select+0x3a>
        while((GPIOB->ODR & (1<<10)) == 0) {
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <tft_select+0x48>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	4013      	ands	r3, r2
 8000664:	d0f9      	beq.n	800065a <tft_select+0x26>
        GPIOB->BRR = 1<<10;
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <tft_select+0x48>)
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	00d2      	lsls	r2, r2, #3
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40013000 	.word	0x40013000
 800067c:	48000400 	.word	0x48000400

08000680 <tft_reset>:

static void tft_reset(int val)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    if (val) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <tft_reset+0x18>
        GPIOB->BRR = 1<<11;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <tft_reset+0x28>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
    } else {
        GPIOB->BSRR = 1<<11;
    }
}
 8000696:	e003      	b.n	80006a0 <tft_reset+0x20>
        GPIOB->BSRR = 1<<11;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <tft_reset+0x28>)
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	619a      	str	r2, [r3, #24]
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	48000400 	.word	0x48000400

080006ac <tft_reg_select>:

static void tft_reg_select(int val)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d104      	bne.n	80006c4 <tft_reg_select+0x18>
        GPIOA->BRR = 1<<3; // clear
 80006ba:	2390      	movs	r3, #144	; 0x90
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2208      	movs	r2, #8
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
    } else { // select data
        GPIOA->BSRR = 1<<3; // set
    }
}
 80006c2:	e003      	b.n	80006cc <tft_reg_select+0x20>
        GPIOA->BSRR = 1<<3; // set
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2208      	movs	r2, #8
 80006ca:	619a      	str	r2, [r3, #24]
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
    lcddev.reset = tft_reset;
 80006e0:	4ba0      	ldr	r3, [pc, #640]	; (8000964 <LCD_Init+0x290>)
 80006e2:	4aa1      	ldr	r2, [pc, #644]	; (8000968 <LCD_Init+0x294>)
 80006e4:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 80006e6:	4b9f      	ldr	r3, [pc, #636]	; (8000964 <LCD_Init+0x290>)
 80006e8:	4aa0      	ldr	r2, [pc, #640]	; (800096c <LCD_Init+0x298>)
 80006ea:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 80006ec:	4b9d      	ldr	r3, [pc, #628]	; (8000964 <LCD_Init+0x290>)
 80006ee:	4aa0      	ldr	r2, [pc, #640]	; (8000970 <LCD_Init+0x29c>)
 80006f0:	619a      	str	r2, [r3, #24]
    if (reset)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <LCD_Init+0x2a>
        lcddev.reset = reset;
 80006f8:	4b9a      	ldr	r3, [pc, #616]	; (8000964 <LCD_Init+0x290>)
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	611a      	str	r2, [r3, #16]
    if (select)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <LCD_Init+0x36>
        lcddev.select = select;
 8000704:	4b97      	ldr	r3, [pc, #604]	; (8000964 <LCD_Init+0x290>)
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	615a      	str	r2, [r3, #20]
    if (reg_select)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 8000710:	4b94      	ldr	r3, [pc, #592]	; (8000964 <LCD_Init+0x290>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	619a      	str	r2, [r3, #24]
    lcddev.select(1);
 8000716:	4b93      	ldr	r3, [pc, #588]	; (8000964 <LCD_Init+0x290>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	2001      	movs	r0, #1
 800071c:	4798      	blx	r3
    LCD_Reset();
 800071e:	f7ff fe7d 	bl	800041c <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8000722:	20cf      	movs	r0, #207	; 0xcf
 8000724:	f7ff fe96 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff feb1 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 800072e:	20d9      	movs	r0, #217	; 0xd9
 8000730:	f7ff feae 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8000734:	2030      	movs	r0, #48	; 0x30
 8000736:	f7ff feab 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 800073a:	20ed      	movs	r0, #237	; 0xed
 800073c:	f7ff fe8a 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f7ff fea5 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8000746:	2003      	movs	r0, #3
 8000748:	f7ff fea2 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 800074c:	2012      	movs	r0, #18
 800074e:	f7ff fe9f 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8000752:	2081      	movs	r0, #129	; 0x81
 8000754:	f7ff fe9c 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8000758:	20e8      	movs	r0, #232	; 0xe8
 800075a:	f7ff fe7b 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 800075e:	2085      	movs	r0, #133	; 0x85
 8000760:	f7ff fe96 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000764:	2010      	movs	r0, #16
 8000766:	f7ff fe93 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 800076a:	207a      	movs	r0, #122	; 0x7a
 800076c:	f7ff fe90 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8000770:	20cb      	movs	r0, #203	; 0xcb
 8000772:	f7ff fe6f 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8000776:	2039      	movs	r0, #57	; 0x39
 8000778:	f7ff fe8a 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 800077c:	202c      	movs	r0, #44	; 0x2c
 800077e:	f7ff fe87 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fe84 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8000788:	2034      	movs	r0, #52	; 0x34
 800078a:	f7ff fe81 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fe7e 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8000794:	20f7      	movs	r0, #247	; 0xf7
 8000796:	f7ff fe5d 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 800079a:	2020      	movs	r0, #32
 800079c:	f7ff fe78 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 80007a0:	20ea      	movs	r0, #234	; 0xea
 80007a2:	f7ff fe57 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fe72 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fe6f 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 80007b2:	20c0      	movs	r0, #192	; 0xc0
 80007b4:	f7ff fe4e 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 80007b8:	2021      	movs	r0, #33	; 0x21
 80007ba:	f7ff fe69 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80007be:	20c1      	movs	r0, #193	; 0xc1
 80007c0:	f7ff fe48 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80007c4:	2012      	movs	r0, #18
 80007c6:	f7ff fe63 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80007ca:	20c5      	movs	r0, #197	; 0xc5
 80007cc:	f7ff fe42 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 80007d0:	2039      	movs	r0, #57	; 0x39
 80007d2:	f7ff fe5d 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 80007d6:	2037      	movs	r0, #55	; 0x37
 80007d8:	f7ff fe5a 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 80007dc:	20c7      	movs	r0, #199	; 0xc7
 80007de:	f7ff fe39 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 80007e2:	20ab      	movs	r0, #171	; 0xab
 80007e4:	f7ff fe54 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 80007e8:	2036      	movs	r0, #54	; 0x36
 80007ea:	f7ff fe33 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 80007ee:	2048      	movs	r0, #72	; 0x48
 80007f0:	f7ff fe4e 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 80007f4:	203a      	movs	r0, #58	; 0x3a
 80007f6:	f7ff fe2d 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 80007fa:	2055      	movs	r0, #85	; 0x55
 80007fc:	f7ff fe48 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8000800:	20b1      	movs	r0, #177	; 0xb1
 8000802:	f7ff fe27 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fe42 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 800080c:	201b      	movs	r0, #27
 800080e:	f7ff fe3f 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8000812:	20b6      	movs	r0, #182	; 0xb6
 8000814:	f7ff fe1e 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8000818:	200a      	movs	r0, #10
 800081a:	f7ff fe39 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 800081e:	20a2      	movs	r0, #162	; 0xa2
 8000820:	f7ff fe36 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000824:	20f2      	movs	r0, #242	; 0xf2
 8000826:	f7ff fe15 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fe30 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f7ff fe0f 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe2a 	bl	8000490 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 800083c:	20e0      	movs	r0, #224	; 0xe0
 800083e:	f7ff fe09 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8000842:	200f      	movs	r0, #15
 8000844:	f7ff fe24 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8000848:	2023      	movs	r0, #35	; 0x23
 800084a:	f7ff fe21 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 800084e:	201f      	movs	r0, #31
 8000850:	f7ff fe1e 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000854:	200b      	movs	r0, #11
 8000856:	f7ff fe1b 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 800085a:	200e      	movs	r0, #14
 800085c:	f7ff fe18 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000860:	2008      	movs	r0, #8
 8000862:	f7ff fe15 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8000866:	204b      	movs	r0, #75	; 0x4b
 8000868:	f7ff fe12 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 800086c:	20a8      	movs	r0, #168	; 0xa8
 800086e:	f7ff fe0f 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8000872:	203b      	movs	r0, #59	; 0x3b
 8000874:	f7ff fe0c 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8000878:	200a      	movs	r0, #10
 800087a:	f7ff fe09 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 800087e:	2014      	movs	r0, #20
 8000880:	f7ff fe06 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8000884:	2006      	movs	r0, #6
 8000886:	f7ff fe03 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fe00 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000890:	2009      	movs	r0, #9
 8000892:	f7ff fdfd 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fdfa 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 800089c:	20e1      	movs	r0, #225	; 0xe1
 800089e:	f7ff fdd9 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fdf4 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 80008a8:	201c      	movs	r0, #28
 80008aa:	f7ff fdf1 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 80008ae:	2020      	movs	r0, #32
 80008b0:	f7ff fdee 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff fdeb 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80008ba:	2010      	movs	r0, #16
 80008bc:	f7ff fde8 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 80008c0:	2008      	movs	r0, #8
 80008c2:	f7ff fde5 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80008c6:	2034      	movs	r0, #52	; 0x34
 80008c8:	f7ff fde2 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 80008cc:	2047      	movs	r0, #71	; 0x47
 80008ce:	f7ff fddf 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 80008d2:	2044      	movs	r0, #68	; 0x44
 80008d4:	f7ff fddc 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 80008d8:	2005      	movs	r0, #5
 80008da:	f7ff fdd9 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 80008de:	200b      	movs	r0, #11
 80008e0:	f7ff fdd6 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 80008e4:	2009      	movs	r0, #9
 80008e6:	f7ff fdd3 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 80008ea:	202f      	movs	r0, #47	; 0x2f
 80008ec:	f7ff fdd0 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 80008f0:	2036      	movs	r0, #54	; 0x36
 80008f2:	f7ff fdcd 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fdca 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 80008fc:	202b      	movs	r0, #43	; 0x2b
 80008fe:	f7ff fda9 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fdc4 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdc1 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fdbe 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8000914:	203f      	movs	r0, #63	; 0x3f
 8000916:	f7ff fdbb 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 800091a:	202a      	movs	r0, #42	; 0x2a
 800091c:	f7ff fd9a 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fdb5 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fdb2 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fdaf 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8000932:	20ef      	movs	r0, #239	; 0xef
 8000934:	f7ff fdac 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8000938:	2011      	movs	r0, #17
 800093a:	f7ff fd8b 	bl	8000454 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <LCD_Init+0x2a0>)
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fd5f 	bl	8000404 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8000946:	2029      	movs	r0, #41	; 0x29
 8000948:	f7ff fd84 	bl	8000454 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fe1d 	bl	800058c <LCD_direction>
    lcddev.select(0);
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <LCD_Init+0x290>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	2000      	movs	r0, #0
 8000958:	4798      	blx	r3
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000adc 	.word	0x20000adc
 8000968:	08000681 	.word	0x08000681
 800096c:	08000635 	.word	0x08000635
 8000970:	080006ad 	.word	0x080006ad
 8000974:	07270e00 	.word	0x07270e00

08000978 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	0005      	movs	r5, r0
 8000980:	000c      	movs	r4, r1
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	1dbb      	adds	r3, r7, #6
 8000988:	1c2a      	adds	r2, r5, #0
 800098a:	801a      	strh	r2, [r3, #0]
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	1c22      	adds	r2, r4, #0
 8000990:	801a      	strh	r2, [r3, #0]
 8000992:	1cbb      	adds	r3, r7, #2
 8000994:	1c02      	adds	r2, r0, #0
 8000996:	801a      	strh	r2, [r3, #0]
 8000998:	003b      	movs	r3, r7
 800099a:	1c0a      	adds	r2, r1, #0
 800099c:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <LCD_SetWindow+0xbc>)
 80009a0:	895b      	ldrh	r3, [r3, #10]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fd55 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fd6b 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fd65 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 80009c6:	1cbb      	adds	r3, r7, #2
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fd5d 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 80009d6:	1cbb      	adds	r3, r7, #2
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fd57 	bl	8000490 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <LCD_SetWindow+0xbc>)
 80009e4:	899b      	ldrh	r3, [r3, #12]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fd33 	bl	8000454 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fd49 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fd43 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fd3b 	bl	8000490 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fd35 	bl	8000490 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8000a26:	f7ff fda3 	bl	8000570 <LCD_WriteRAM_Prepare>
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bdb0      	pop	{r4, r5, r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000adc 	.word	0x20000adc

08000a38 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <LCD_Clear+0x80>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	2001      	movs	r0, #1
 8000a4a:	4798      	blx	r3
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <LCD_Clear+0x80>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <LCD_Clear+0x80>)
 8000a56:	885b      	ldrh	r3, [r3, #2]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ff8a 	bl	8000978 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000a64:	f7ff fd32 	bl	80004cc <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e013      	b.n	8000a96 <LCD_Clear+0x5e>
    {
        for(m=0;m<lcddev.width;m++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	e007      	b.n	8000a84 <LCD_Clear+0x4c>
        {
            LCD_WriteData16(Color);
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fd3b 	bl	80004f4 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <LCD_Clear+0x80>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d3f1      	bcc.n	8000a74 <LCD_Clear+0x3c>
    for(i=0;i<lcddev.height;i++)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LCD_Clear+0x80>)
 8000a98:	885b      	ldrh	r3, [r3, #2]
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d3e5      	bcc.n	8000a6e <LCD_Clear+0x36>
        }
    }
    LCD_WriteData16_End();
 8000aa2:	f7ff fd3d 	bl	8000520 <LCD_WriteData16_End>
    lcddev.select(0);
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <LCD_Clear+0x80>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	2000      	movs	r0, #0
 8000aac:	4798      	blx	r3
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000adc 	.word	0x20000adc

08000abc <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0004      	movs	r4, r0
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	1c22      	adds	r2, r4, #0
 8000acc:	801a      	strh	r2, [r3, #0]
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	1c02      	adds	r2, r0, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	1cbb      	adds	r3, r7, #2
 8000ad6:	1c0a      	adds	r2, r1, #0
 8000ad8:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	881c      	ldrh	r4, [r3, #0]
 8000ade:	1dbb      	adds	r3, r7, #6
 8000ae0:	881a      	ldrh	r2, [r3, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	8819      	ldrh	r1, [r3, #0]
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	8818      	ldrh	r0, [r3, #0]
 8000aea:	0023      	movs	r3, r4
 8000aec:	f7ff ff44 	bl	8000978 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000af0:	f7ff fcec 	bl	80004cc <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8000af4:	1cbb      	adds	r3, r7, #2
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fcfb 	bl	80004f4 <LCD_WriteData16>
    LCD_WriteData16_End();
 8000afe:	f7ff fd0f 	bl	8000520 <LCD_WriteData16_End>
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b003      	add	sp, #12
 8000b08:	bd90      	pop	{r4, r7, pc}

08000b0a <_LCD_DrawLine>:

//===========================================================================
// Draw a line of color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8000b0a:	b5b0      	push	{r4, r5, r7, lr}
 8000b0c:	b08c      	sub	sp, #48	; 0x30
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	0005      	movs	r5, r0
 8000b12:	000c      	movs	r4, r1
 8000b14:	0010      	movs	r0, r2
 8000b16:	0019      	movs	r1, r3
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	1c2a      	adds	r2, r5, #0
 8000b1c:	801a      	strh	r2, [r3, #0]
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	1c22      	adds	r2, r4, #0
 8000b22:	801a      	strh	r2, [r3, #0]
 8000b24:	1cbb      	adds	r3, r7, #2
 8000b26:	1c02      	adds	r2, r0, #0
 8000b28:	801a      	strh	r2, [r3, #0]
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	1c0a      	adds	r2, r1, #0
 8000b2e:	801a      	strh	r2, [r3, #0]
    u16 t;
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    int incx,incy,uRow,uCol;

    delta_x=x2-x1;
 8000b38:	1cbb      	adds	r3, r7, #2
 8000b3a:	881a      	ldrh	r2, [r3, #0]
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	623b      	str	r3, [r7, #32]
    delta_y=y2-y1;
 8000b44:	003b      	movs	r3, r7
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	61fb      	str	r3, [r7, #28]
    uRow=x1;
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
    uCol=y1;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	60bb      	str	r3, [r7, #8]
    if(delta_x>0)incx=1;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dd02      	ble.n	8000b68 <_LCD_DrawLine+0x5e>
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e00b      	b.n	8000b80 <_LCD_DrawLine+0x76>
    else if(delta_x==0)incx=0;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <_LCD_DrawLine+0x6a>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e005      	b.n	8000b80 <_LCD_DrawLine+0x76>
    else {incx=-1;delta_x=-delta_x;}
 8000b74:	2301      	movs	r3, #1
 8000b76:	425b      	negs	r3, r3
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	623b      	str	r3, [r7, #32]
    if(delta_y>0)incy=1;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dd02      	ble.n	8000b8c <_LCD_DrawLine+0x82>
 8000b86:	2301      	movs	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	e00b      	b.n	8000ba4 <_LCD_DrawLine+0x9a>
    else if(delta_y==0)incy=0;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <_LCD_DrawLine+0x8e>
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e005      	b.n	8000ba4 <_LCD_DrawLine+0x9a>
    else{incy=-1;delta_y=-delta_y;}
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	61fb      	str	r3, [r7, #28]
    if( delta_x>delta_y)distance=delta_x;
 8000ba4:	6a3a      	ldr	r2, [r7, #32]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dd02      	ble.n	8000bb2 <_LCD_DrawLine+0xa8>
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	e001      	b.n	8000bb6 <_LCD_DrawLine+0xac>
    else distance=delta_y;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	61bb      	str	r3, [r7, #24]
    for(t=0;t<=distance+1;t++ )
 8000bb6:	232e      	movs	r3, #46	; 0x2e
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
 8000bbe:	e02f      	b.n	8000c20 <_LCD_DrawLine+0x116>
    {
        _LCD_DrawPoint(uRow,uCol,c);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	b298      	uxth	r0, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	001a      	movs	r2, r3
 8000bd0:	f7ff ff74 	bl	8000abc <_LCD_DrawPoint>
        xerr+=delta_x ;
 8000bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr+=delta_y ;
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
        if(xerr>distance)
 8000be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd07      	ble.n	8000bfc <_LCD_DrawLine+0xf2>
        {
            xerr-=distance;
 8000bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
            uRow+=incx;
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	60fb      	str	r3, [r7, #12]
        }
        if(yerr>distance)
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dd07      	ble.n	8000c14 <_LCD_DrawLine+0x10a>
        {
            yerr-=distance;
 8000c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
            uCol+=incy;
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	60bb      	str	r3, [r7, #8]
    for(t=0;t<=distance+1;t++ )
 8000c14:	212e      	movs	r1, #46	; 0x2e
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	3201      	adds	r2, #1
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	232e      	movs	r3, #46	; 0x2e
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	881a      	ldrh	r2, [r3, #0]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	ddc8      	ble.n	8000bc0 <_LCD_DrawLine+0xb6>
        }
    }
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00c      	add	sp, #48	; 0x30
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}

08000c38 <LCD_DrawLine>:

void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	0005      	movs	r5, r0
 8000c40:	000c      	movs	r4, r1
 8000c42:	0010      	movs	r0, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	1c2a      	adds	r2, r5, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	1c22      	adds	r2, r4, #0
 8000c50:	801a      	strh	r2, [r3, #0]
 8000c52:	1cbb      	adds	r3, r7, #2
 8000c54:	1c02      	adds	r2, r0, #0
 8000c56:	801a      	strh	r2, [r3, #0]
 8000c58:	003b      	movs	r3, r7
 8000c5a:	1c0a      	adds	r2, r1, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <LCD_DrawLine+0x5c>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	2001      	movs	r0, #1
 8000c64:	4798      	blx	r3
    _LCD_DrawLine(x1,y1,x2,y2,c);
 8000c66:	003b      	movs	r3, r7
 8000c68:	881c      	ldrh	r4, [r3, #0]
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	8819      	ldrh	r1, [r3, #0]
 8000c72:	1dbb      	adds	r3, r7, #6
 8000c74:	8818      	ldrh	r0, [r3, #0]
 8000c76:	2318      	movs	r3, #24
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	0023      	movs	r3, r4
 8000c80:	f7ff ff43 	bl	8000b0a <_LCD_DrawLine>
    lcddev.select(0);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <LCD_DrawLine+0x5c>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	2000      	movs	r0, #0
 8000c8a:	4798      	blx	r3
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bdb0      	pop	{r4, r5, r7, pc}
 8000c94:	20000adc 	.word	0x20000adc

08000c98 <LCD_DrawRectangle>:

//===========================================================================
// Draw a rectangle of lines of color c from (x1,y1) to (x2,y2).
//===========================================================================
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	0005      	movs	r5, r0
 8000ca0:	000c      	movs	r4, r1
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	1c2a      	adds	r2, r5, #0
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	1c22      	adds	r2, r4, #0
 8000cb0:	801a      	strh	r2, [r3, #0]
 8000cb2:	1cbb      	adds	r3, r7, #2
 8000cb4:	1c02      	adds	r2, r0, #0
 8000cb6:	801a      	strh	r2, [r3, #0]
 8000cb8:	003b      	movs	r3, r7
 8000cba:	1c0a      	adds	r2, r1, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <LCD_DrawRectangle+0xb0>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4798      	blx	r3
    _LCD_DrawLine(x1,y1,x2,y1,c);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	881c      	ldrh	r4, [r3, #0]
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	8819      	ldrh	r1, [r3, #0]
 8000cd2:	1dbb      	adds	r3, r7, #6
 8000cd4:	8818      	ldrh	r0, [r3, #0]
 8000cd6:	2518      	movs	r5, #24
 8000cd8:	197b      	adds	r3, r7, r5
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	0023      	movs	r3, r4
 8000ce0:	f7ff ff13 	bl	8000b0a <_LCD_DrawLine>
    _LCD_DrawLine(x1,y1,x1,y2,c);
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	881c      	ldrh	r4, [r3, #0]
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	8819      	ldrh	r1, [r3, #0]
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	8818      	ldrh	r0, [r3, #0]
 8000cf4:	197b      	adds	r3, r7, r5
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	0023      	movs	r3, r4
 8000cfc:	f7ff ff05 	bl	8000b0a <_LCD_DrawLine>
    _LCD_DrawLine(x1,y2,x2,y2,c);
 8000d00:	003b      	movs	r3, r7
 8000d02:	881c      	ldrh	r4, [r3, #0]
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	003b      	movs	r3, r7
 8000d0a:	8819      	ldrh	r1, [r3, #0]
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	8818      	ldrh	r0, [r3, #0]
 8000d10:	197b      	adds	r3, r7, r5
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	0023      	movs	r3, r4
 8000d18:	f7ff fef7 	bl	8000b0a <_LCD_DrawLine>
    _LCD_DrawLine(x2,y1,x2,y2,c);
 8000d1c:	003b      	movs	r3, r7
 8000d1e:	881c      	ldrh	r4, [r3, #0]
 8000d20:	1cbb      	adds	r3, r7, #2
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	8819      	ldrh	r1, [r3, #0]
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	8818      	ldrh	r0, [r3, #0]
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	0023      	movs	r3, r4
 8000d34:	f7ff fee9 	bl	8000b0a <_LCD_DrawLine>
    lcddev.select(0);
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <LCD_DrawRectangle+0xb0>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	4798      	blx	r3
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	20000adc 	.word	0x20000adc

08000d4c <_LCD_Fill>:

//===========================================================================
// Fill a rectangle with color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0005      	movs	r5, r0
 8000d54:	000c      	movs	r4, r1
 8000d56:	0010      	movs	r0, r2
 8000d58:	0019      	movs	r1, r3
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	1c2a      	adds	r2, r5, #0
 8000d5e:	801a      	strh	r2, [r3, #0]
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	1c22      	adds	r2, r4, #0
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	1cbb      	adds	r3, r7, #2
 8000d68:	1c02      	adds	r2, r0, #0
 8000d6a:	801a      	strh	r2, [r3, #0]
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	1c0a      	adds	r2, r1, #0
 8000d70:	801a      	strh	r2, [r3, #0]
    u16 i,j;
    u16 width=ex-sx+1;
 8000d72:	1cba      	adds	r2, r7, #2
 8000d74:	1dbb      	adds	r3, r7, #6
 8000d76:	8812      	ldrh	r2, [r2, #0]
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	230a      	movs	r3, #10
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	3201      	adds	r2, #1
 8000d84:	801a      	strh	r2, [r3, #0]
    u16 height=ey-sy+1;
 8000d86:	003a      	movs	r2, r7
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	8812      	ldrh	r2, [r2, #0]
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	2308      	movs	r3, #8
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	3201      	adds	r2, #1
 8000d98:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(sx,sy,ex,ey);
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	881c      	ldrh	r4, [r3, #0]
 8000d9e:	1cbb      	adds	r3, r7, #2
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	8819      	ldrh	r1, [r3, #0]
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	8818      	ldrh	r0, [r3, #0]
 8000daa:	0023      	movs	r3, r4
 8000dac:	f7ff fde4 	bl	8000978 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000db0:	f7ff fb8c 	bl	80004cc <LCD_WriteData16_Prepare>
    for(i=0;i<height;i++)
 8000db4:	230e      	movs	r3, #14
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
 8000dbc:	e01e      	b.n	8000dfc <_LCD_Fill+0xb0>
    {
        for(j=0;j<width;j++)
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	e00b      	b.n	8000de0 <_LCD_Fill+0x94>
        LCD_WriteData16(color);
 8000dc8:	2320      	movs	r3, #32
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fb90 	bl	80004f4 <LCD_WriteData16>
        for(j=0;j<width;j++)
 8000dd4:	210c      	movs	r1, #12
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	3201      	adds	r2, #1
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	230c      	movs	r3, #12
 8000de2:	18fa      	adds	r2, r7, r3
 8000de4:	230a      	movs	r3, #10
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	8812      	ldrh	r2, [r2, #0]
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3eb      	bcc.n	8000dc8 <_LCD_Fill+0x7c>
    for(i=0;i<height;i++)
 8000df0:	210e      	movs	r1, #14
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	3201      	adds	r2, #1
 8000dfa:	801a      	strh	r2, [r3, #0]
 8000dfc:	230e      	movs	r3, #14
 8000dfe:	18fa      	adds	r2, r7, r3
 8000e00:	2308      	movs	r3, #8
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3d8      	bcc.n	8000dbe <_LCD_Fill+0x72>
    }
    LCD_WriteData16_End();
 8000e0c:	f7ff fb88 	bl	8000520 <LCD_WriteData16_End>
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b004      	add	sp, #16
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}

08000e18 <LCD_DrawFillRectangle>:

//===========================================================================
// Draw a filled rectangle of lines of color c from (x1,y1) to (x2,y2).
//===========================================================================
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	0005      	movs	r5, r0
 8000e20:	000c      	movs	r4, r1
 8000e22:	0010      	movs	r0, r2
 8000e24:	0019      	movs	r1, r3
 8000e26:	1dbb      	adds	r3, r7, #6
 8000e28:	1c2a      	adds	r2, r5, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	1c22      	adds	r2, r4, #0
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	1cbb      	adds	r3, r7, #2
 8000e34:	1c02      	adds	r2, r0, #0
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	003b      	movs	r3, r7
 8000e3a:	1c0a      	adds	r2, r1, #0
 8000e3c:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <LCD_DrawFillRectangle+0x5c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2001      	movs	r0, #1
 8000e44:	4798      	blx	r3
    _LCD_Fill(x1,y1,x2,y2,c);
 8000e46:	003b      	movs	r3, r7
 8000e48:	881c      	ldrh	r4, [r3, #0]
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	8819      	ldrh	r1, [r3, #0]
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	8818      	ldrh	r0, [r3, #0]
 8000e56:	2318      	movs	r3, #24
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	0023      	movs	r3, r4
 8000e60:	f7ff ff74 	bl	8000d4c <_LCD_Fill>
    lcddev.select(0);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <LCD_DrawFillRectangle+0x5c>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	2000      	movs	r0, #0
 8000e6a:	4798      	blx	r3
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bdb0      	pop	{r4, r5, r7, pc}
 8000e74:	20000adc 	.word	0x20000adc

08000e78 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
    _LCD_DrawPoint(xc + x, yc + y, c);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	18d3      	adds	r3, r2, r3
 8000e90:	b298      	uxth	r0, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	18d3      	adds	r3, r2, r3
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	2418      	movs	r4, #24
 8000ea0:	2508      	movs	r5, #8
 8000ea2:	1963      	adds	r3, r4, r5
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	f7ff fe07 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc - x, yc + y, c);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	b298      	uxth	r0, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	18d3      	adds	r3, r2, r3
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	1963      	adds	r3, r4, r5
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	001a      	movs	r2, r3
 8000ece:	f7ff fdf5 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc + x, yc - y, c);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	b298      	uxth	r0, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	1963      	adds	r3, r4, r5
 8000eec:	19db      	adds	r3, r3, r7
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	f7ff fde3 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc - x, yc - y, c);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b298      	uxth	r0, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	1963      	adds	r3, r4, r5
 8000f10:	19db      	adds	r3, r3, r7
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	001a      	movs	r2, r3
 8000f16:	f7ff fdd1 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc + y, yc + x, c);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	b298      	uxth	r0, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	b299      	uxth	r1, r3
 8000f32:	1963      	adds	r3, r4, r5
 8000f34:	19db      	adds	r3, r3, r7
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	f7ff fdbf 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc - y, yc + x, c);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	b298      	uxth	r0, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	b299      	uxth	r1, r3
 8000f56:	1963      	adds	r3, r4, r5
 8000f58:	19db      	adds	r3, r3, r7
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	f7ff fdad 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc + y, yc - x, c);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b299      	uxth	r1, r3
 8000f7a:	1963      	adds	r3, r4, r5
 8000f7c:	19db      	adds	r3, r3, r7
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	001a      	movs	r2, r3
 8000f82:	f7ff fd9b 	bl	8000abc <_LCD_DrawPoint>
    _LCD_DrawPoint(xc - y, yc - x, c);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b298      	uxth	r0, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	1963      	adds	r3, r4, r5
 8000fa0:	19db      	adds	r3, r3, r7
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	f7ff fd89 	bl	8000abc <_LCD_DrawPoint>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000fb4 <LCD_Circle>:
//===========================================================================
// Draw a circle of color c and radius r at center (xc,yc).
// The fill parameter indicates if it is to be filled.
//===========================================================================
void LCD_Circle(u16 xc, u16 yc, u16 r, u16 fill, u16 c)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	0005      	movs	r5, r0
 8000fbc:	000c      	movs	r4, r1
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	1c2a      	adds	r2, r5, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	1c22      	adds	r2, r4, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	1cbb      	adds	r3, r7, #2
 8000fd0:	1c02      	adds	r2, r0, #0
 8000fd2:	801a      	strh	r2, [r3, #0]
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	1c0a      	adds	r2, r1, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <LCD_Circle+0x118>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	2001      	movs	r0, #1
 8000fe0:	4798      	blx	r3
    int x = 0, y = r, yi, d;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	1cbb      	adds	r3, r7, #2
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
    d = 3 - 2 * r;
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	60bb      	str	r3, [r7, #8]

    if (fill)
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d059      	beq.n	80010b4 <LCD_Circle+0x100>
    {
        while (x <= y) {
 8001000:	e02e      	b.n	8001060 <LCD_Circle+0xac>
            for (yi = x; yi <= y; yi++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e00f      	b.n	8001028 <LCD_Circle+0x74>
                _draw_circle_8(xc, yc, x, yi, c);
 8001008:	1dbb      	adds	r3, r7, #6
 800100a:	8818      	ldrh	r0, [r3, #0]
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	8819      	ldrh	r1, [r3, #0]
 8001010:	68fc      	ldr	r4, [r7, #12]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	2328      	movs	r3, #40	; 0x28
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	0023      	movs	r3, r4
 800101e:	f7ff ff2b 	bl	8000e78 <_draw_circle_8>
            for (yi = x; yi <= y; yi++)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	ddeb      	ble.n	8001008 <LCD_Circle+0x54>

            if (d < 0) {
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da06      	bge.n	8001044 <LCD_Circle+0x90>
                d = d + 4 * x + 6;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	009a      	lsls	r2, r3, #2
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	3306      	adds	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	e00a      	b.n	800105a <LCD_Circle+0xa6>
            } else {
                d = d + 4 * (x - y) + 10;
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	009a      	lsls	r2, r3, #2
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	330a      	adds	r3, #10
 8001052:	60bb      	str	r3, [r7, #8]
                y--;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	3b01      	subs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
            }
            x++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
        while (x <= y) {
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	ddcc      	ble.n	8001002 <LCD_Circle+0x4e>
 8001068:	e028      	b.n	80010bc <LCD_Circle+0x108>
        }
    } else
    {
        while (x <= y) {
            _draw_circle_8(xc, yc, x, y, c);
 800106a:	1dbb      	adds	r3, r7, #6
 800106c:	8818      	ldrh	r0, [r3, #0]
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	693c      	ldr	r4, [r7, #16]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	2328      	movs	r3, #40	; 0x28
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	0023      	movs	r3, r4
 8001080:	f7ff fefa 	bl	8000e78 <_draw_circle_8>
            if (d < 0) {
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da06      	bge.n	8001098 <LCD_Circle+0xe4>
                d = d + 4 * x + 6;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	3306      	adds	r3, #6
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	e00a      	b.n	80010ae <LCD_Circle+0xfa>
            } else {
                d = d + 4 * (x - y) + 10;
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	009a      	lsls	r2, r3, #2
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	330a      	adds	r3, #10
 80010a6:	60bb      	str	r3, [r7, #8]
                y--;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
            }
            x++;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
        while (x <= y) {
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	ddd6      	ble.n	800106a <LCD_Circle+0xb6>
        }
    }
    lcddev.select(0);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <LCD_Circle+0x118>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	2000      	movs	r0, #0
 80010c2:	4798      	blx	r3
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000adc 	.word	0x20000adc

080010d0 <_swap>:
    _LCD_DrawLine(x2,y2,x0,y0,c);
    lcddev.select(0);
}

static void _swap(u16 *a, u16 *b)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    u16 tmp;
    tmp = *a;
 80010da:	210e      	movs	r1, #14
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	8812      	ldrh	r2, [r2, #0]
 80010e2:	801a      	strh	r2, [r3, #0]
    *a = *b;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	801a      	strh	r2, [r3, #0]
    *b = tmp;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	187a      	adds	r2, r7, r1
 80010f0:	8812      	ldrh	r2, [r2, #0]
 80010f2:	801a      	strh	r2, [r3, #0]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b004      	add	sp, #16
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LCD_DrawFillTriangle>:

//===========================================================================
// Draw a filled triangle of color c with vertices at (x0,y0), (x1,y1), (x2,y2).
//===========================================================================
void LCD_DrawFillTriangle(u16 x0,u16 y0, u16 x1,u16 y1, u16 x2,u16 y2, u16 c)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af02      	add	r7, sp, #8
 8001102:	0005      	movs	r5, r0
 8001104:	000c      	movs	r4, r1
 8001106:	0010      	movs	r0, r2
 8001108:	0019      	movs	r1, r3
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	1c2a      	adds	r2, r5, #0
 800110e:	801a      	strh	r2, [r3, #0]
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	1c22      	adds	r2, r4, #0
 8001114:	801a      	strh	r2, [r3, #0]
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	1c02      	adds	r2, r0, #0
 800111a:	801a      	strh	r2, [r3, #0]
 800111c:	003b      	movs	r3, r7
 800111e:	1c0a      	adds	r2, r1, #0
 8001120:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8001122:	4b9a      	ldr	r3, [pc, #616]	; (800138c <LCD_DrawFillTriangle+0x290>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	2001      	movs	r0, #1
 8001128:	4798      	blx	r3
    u16 a, b, y, last;
    int dx01, dy01, dx02, dy02, dx12, dy12;
    long sa = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    long sb = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    if (y0 > y1)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	003b      	movs	r3, r7
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d90b      	bls.n	8001156 <LCD_DrawFillTriangle+0x5a>
    {
    _swap(&y0,&y1);
 800113e:	003a      	movs	r2, r7
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ffc3 	bl	80010d0 <_swap>
        _swap(&x0,&x1);
 800114a:	1cba      	adds	r2, r7, #2
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ffbd 	bl	80010d0 <_swap>
    }
    if (y1 > y2)
 8001156:	003b      	movs	r3, r7
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	2144      	movs	r1, #68	; 0x44
 800115c:	187b      	adds	r3, r7, r1
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d90c      	bls.n	800117e <LCD_DrawFillTriangle+0x82>
    {
    _swap(&y2,&y1);
 8001164:	003a      	movs	r2, r7
 8001166:	187b      	adds	r3, r7, r1
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ffb0 	bl	80010d0 <_swap>
        _swap(&x2,&x1);
 8001170:	1cba      	adds	r2, r7, #2
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ffa9 	bl	80010d0 <_swap>
    }
  if (y0 > y1)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	003b      	movs	r3, r7
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d90b      	bls.n	80011a2 <LCD_DrawFillTriangle+0xa6>
    {
    _swap(&y0,&y1);
 800118a:	003a      	movs	r2, r7
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff9d 	bl	80010d0 <_swap>
        _swap(&x0,&x1);
 8001196:	1cba      	adds	r2, r7, #2
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	0011      	movs	r1, r2
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ff97 	bl	80010d0 <_swap>
  }
    if(y0 == y2)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	2344      	movs	r3, #68	; 0x44
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d14a      	bne.n	8001246 <LCD_DrawFillTriangle+0x14a>
    {
        a = b = x0;
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	2108      	movs	r1, #8
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	210a      	movs	r1, #10
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	801a      	strh	r2, [r3, #0]
        if(x1 < a)
 80011c4:	1cbb      	adds	r3, r7, #2
 80011c6:	881a      	ldrh	r2, [r3, #0]
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d204      	bcs.n	80011da <LCD_DrawFillTriangle+0xde>
    {
            a = x1;
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	e00a      	b.n	80011f0 <LCD_DrawFillTriangle+0xf4>
    }
    else if(x1 > b)
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	881a      	ldrh	r2, [r3, #0]
 80011de:	2108      	movs	r1, #8
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d903      	bls.n	80011f0 <LCD_DrawFillTriangle+0xf4>
    {
            b = x1;
 80011e8:	1cbb      	adds	r3, r7, #2
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	801a      	strh	r2, [r3, #0]
    }
    if(x2 < a)
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	200a      	movs	r0, #10
 80011f8:	183b      	adds	r3, r7, r0
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d204      	bcs.n	800120a <LCD_DrawFillTriangle+0x10e>
    {
            a = x2;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	183b      	adds	r3, r7, r0
 8001206:	801a      	strh	r2, [r3, #0]
 8001208:	e00b      	b.n	8001222 <LCD_DrawFillTriangle+0x126>
    }
        else if(x2 > b)
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	187b      	adds	r3, r7, r1
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	2008      	movs	r0, #8
 8001212:	183b      	adds	r3, r7, r0
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d903      	bls.n	8001222 <LCD_DrawFillTriangle+0x126>
    {
            b = x2;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	183b      	adds	r3, r7, r0
 8001220:	801a      	strh	r2, [r3, #0]
    }
        _LCD_Fill(a,y0,b,y0,c);
 8001222:	230a      	movs	r3, #10
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	8818      	ldrh	r0, [r3, #0]
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	8819      	ldrh	r1, [r3, #0]
 800122c:	2308      	movs	r3, #8
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	881a      	ldrh	r2, [r3, #0]
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	881c      	ldrh	r4, [r3, #0]
 8001236:	2348      	movs	r3, #72	; 0x48
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	0023      	movs	r3, r4
 8001240:	f7ff fd84 	bl	8000d4c <_LCD_Fill>
 8001244:	e0f5      	b.n	8001432 <LCD_DrawFillTriangle+0x336>
    return;
    }
    dx01 = x1 - x0;
 8001246:	1cbb      	adds	r3, r7, #2
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	001a      	movs	r2, r3
 800124c:	1dbb      	adds	r3, r7, #6
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	623b      	str	r3, [r7, #32]
    dy01 = y1 - y0;
 8001254:	003b      	movs	r3, r7
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]
    dx02 = x2 - x0;
 8001262:	2040      	movs	r0, #64	; 0x40
 8001264:	183b      	adds	r3, r7, r0
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	1dbb      	adds	r3, r7, #6
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	61bb      	str	r3, [r7, #24]
    dy02 = y2 - y0;
 8001272:	2144      	movs	r1, #68	; 0x44
 8001274:	187b      	adds	r3, r7, r1
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	617b      	str	r3, [r7, #20]
    dx12 = x2 - x1;
 8001282:	183b      	adds	r3, r7, r0
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	001a      	movs	r2, r3
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	613b      	str	r3, [r7, #16]
    dy12 = y2 - y1;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	003b      	movs	r3, r7
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	60fb      	str	r3, [r7, #12]

    if(y1 == y2)
 800129e:	003b      	movs	r3, r7
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d105      	bne.n	80012b6 <LCD_DrawFillTriangle+0x1ba>
    {
        last = y1;
 80012aa:	232c      	movs	r3, #44	; 0x2c
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	003a      	movs	r2, r7
 80012b0:	8812      	ldrh	r2, [r2, #0]
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	e005      	b.n	80012c2 <LCD_DrawFillTriangle+0x1c6>
    }
  else
    {
        last = y1-1;
 80012b6:	003b      	movs	r3, r7
 80012b8:	881a      	ldrh	r2, [r3, #0]
 80012ba:	232c      	movs	r3, #44	; 0x2c
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	3a01      	subs	r2, #1
 80012c0:	801a      	strh	r2, [r3, #0]
    }
    for(y=y0; y<=last; y++)
 80012c2:	232e      	movs	r3, #46	; 0x2e
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	8812      	ldrh	r2, [r2, #0]
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	e044      	b.n	8001358 <LCD_DrawFillTriangle+0x25c>
    {
        a = x0 + sa / dy01;
 80012ce:	69f9      	ldr	r1, [r7, #28]
 80012d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012d2:	f7fe ffab 	bl	800022c <__divsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	1dbb      	adds	r3, r7, #6
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	240a      	movs	r4, #10
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	801a      	strh	r2, [r3, #0]
        b = x0 + sb / dy02;
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ec:	f7fe ff9e 	bl	800022c <__divsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	1dbb      	adds	r3, r7, #6
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2108      	movs	r1, #8
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 8001302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 800130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	18d3      	adds	r3, r2, r3
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 8001312:	193b      	adds	r3, r7, r4
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	187b      	adds	r3, r7, r1
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d905      	bls.n	800132a <LCD_DrawFillTriangle+0x22e>
    {
            _swap(&a,&b);
 800131e:	187a      	adds	r2, r7, r1
 8001320:	193b      	adds	r3, r7, r4
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fed3 	bl	80010d0 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 800132a:	230a      	movs	r3, #10
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	8818      	ldrh	r0, [r3, #0]
 8001330:	2308      	movs	r3, #8
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	252e      	movs	r5, #46	; 0x2e
 8001338:	197b      	adds	r3, r7, r5
 800133a:	881c      	ldrh	r4, [r3, #0]
 800133c:	197b      	adds	r3, r7, r5
 800133e:	8819      	ldrh	r1, [r3, #0]
 8001340:	2348      	movs	r3, #72	; 0x48
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	0023      	movs	r3, r4
 800134a:	f7ff fcff 	bl	8000d4c <_LCD_Fill>
    for(y=y0; y<=last; y++)
 800134e:	197b      	adds	r3, r7, r5
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	197b      	adds	r3, r7, r5
 8001354:	3201      	adds	r2, #1
 8001356:	801a      	strh	r2, [r3, #0]
 8001358:	212e      	movs	r1, #46	; 0x2e
 800135a:	187a      	adds	r2, r7, r1
 800135c:	232c      	movs	r3, #44	; 0x2c
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	8812      	ldrh	r2, [r2, #0]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d9b2      	bls.n	80012ce <LCD_DrawFillTriangle+0x1d2>
    }
    sa = dx12 * (y - y1);
 8001368:	187b      	adds	r3, r7, r1
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	003a      	movs	r2, r7
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	1a9a      	subs	r2, r3, r2
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4353      	muls	r3, r2
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    sb = dx02 * (y - y0);
 8001378:	187b      	adds	r3, r7, r1
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	1d3a      	adds	r2, r7, #4
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	1a9a      	subs	r2, r3, r2
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4353      	muls	r3, r2
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    for(; y<=y2; y++)
 8001388:	e047      	b.n	800141a <LCD_DrawFillTriangle+0x31e>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000adc 	.word	0x20000adc
    {
        a = x1 + sa / dy12;
 8001390:	68f9      	ldr	r1, [r7, #12]
 8001392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001394:	f7fe ff4a 	bl	800022c <__divsi3>
 8001398:	0003      	movs	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	240a      	movs	r4, #10
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	801a      	strh	r2, [r3, #0]
        b = x0 + sb / dy02;
 80013aa:	6979      	ldr	r1, [r7, #20]
 80013ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ae:	f7fe ff3d 	bl	800022c <__divsi3>
 80013b2:	0003      	movs	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	18d3      	adds	r3, r2, r3
 80013bc:	b29a      	uxth	r2, r3
 80013be:	2108      	movs	r1, #8
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 80013c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
        sb += dx02;
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
        if(a > b)
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d905      	bls.n	80013ec <LCD_DrawFillTriangle+0x2f0>
        {
            _swap(&a,&b);
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe72 	bl	80010d0 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 80013ec:	230a      	movs	r3, #10
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	8818      	ldrh	r0, [r3, #0]
 80013f2:	2308      	movs	r3, #8
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	252e      	movs	r5, #46	; 0x2e
 80013fa:	197b      	adds	r3, r7, r5
 80013fc:	881c      	ldrh	r4, [r3, #0]
 80013fe:	197b      	adds	r3, r7, r5
 8001400:	8819      	ldrh	r1, [r3, #0]
 8001402:	2348      	movs	r3, #72	; 0x48
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	0023      	movs	r3, r4
 800140c:	f7ff fc9e 	bl	8000d4c <_LCD_Fill>
    for(; y<=y2; y++)
 8001410:	197b      	adds	r3, r7, r5
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	197b      	adds	r3, r7, r5
 8001416:	3201      	adds	r2, #1
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	2344      	movs	r3, #68	; 0x44
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	222e      	movs	r2, #46	; 0x2e
 8001422:	18ba      	adds	r2, r7, r2
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d9b2      	bls.n	8001390 <LCD_DrawFillTriangle+0x294>
    }
    lcddev.select(0);
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <LCD_DrawFillTriangle+0x33c>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2000      	movs	r0, #0
 8001430:	4798      	blx	r3
}
 8001432:	46bd      	mov	sp, r7
 8001434:	b00c      	add	sp, #48	; 0x30
 8001436:	bdb0      	pop	{r4, r5, r7, pc}
 8001438:	20000adc 	.word	0x20000adc

0800143c <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	0005      	movs	r5, r0
 8001444:	000c      	movs	r4, r1
 8001446:	0010      	movs	r0, r2
 8001448:	0019      	movs	r1, r3
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	1c2a      	adds	r2, r5, #0
 800144e:	801a      	strh	r2, [r3, #0]
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	1c22      	adds	r2, r4, #0
 8001454:	801a      	strh	r2, [r3, #0]
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	1c02      	adds	r2, r0, #0
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	003b      	movs	r3, r7
 800145e:	1c0a      	adds	r2, r1, #0
 8001460:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8001462:	2220      	movs	r2, #32
 8001464:	18bb      	adds	r3, r7, r2
 8001466:	18ba      	adds	r2, r7, r2
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	3a20      	subs	r2, #32
 800146c:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 800146e:	2124      	movs	r1, #36	; 0x24
 8001470:	187b      	adds	r3, r7, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	18d3      	adds	r3, r2, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29c      	uxth	r4, r3
 8001486:	187b      	adds	r3, r7, r1
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	18d3      	adds	r3, r2, r3
 8001492:	b29b      	uxth	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	8819      	ldrh	r1, [r3, #0]
 800149c:	1dbb      	adds	r3, r7, #6
 800149e:	8818      	ldrh	r0, [r3, #0]
 80014a0:	0013      	movs	r3, r2
 80014a2:	0022      	movs	r2, r4
 80014a4:	f7ff fa68 	bl	8000978 <LCD_SetWindow>
    if (!mode) {
 80014a8:	2328      	movs	r3, #40	; 0x28
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d166      	bne.n	8001580 <_LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 80014b2:	f7ff f80b 	bl	80004cc <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 80014b6:	230e      	movs	r3, #14
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e054      	b.n	800156a <_LCD_DrawChar+0x12e>
            if (size==12)
 80014c0:	2324      	movs	r3, #36	; 0x24
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d110      	bne.n	80014ec <_LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 80014ca:	2320      	movs	r3, #32
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	230e      	movs	r3, #14
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	7818      	ldrb	r0, [r3, #0]
 80014d6:	230f      	movs	r3, #15
 80014d8:	18f9      	adds	r1, r7, r3
 80014da:	4c61      	ldr	r4, [pc, #388]	; (8001660 <_LCD_DrawChar+0x224>)
 80014dc:	0013      	movs	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	18e3      	adds	r3, r4, r3
 80014e6:	5c1b      	ldrb	r3, [r3, r0]
 80014e8:	700b      	strb	r3, [r1, #0]
 80014ea:	e00c      	b.n	8001506 <_LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 80014ec:	2320      	movs	r3, #32
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	7819      	ldrb	r1, [r3, #0]
 80014f2:	230e      	movs	r3, #14
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	4859      	ldr	r0, [pc, #356]	; (8001664 <_LCD_DrawChar+0x228>)
 80014fe:	0109      	lsls	r1, r1, #4
 8001500:	1841      	adds	r1, r0, r1
 8001502:	5c8a      	ldrb	r2, [r1, r2]
 8001504:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8001506:	230d      	movs	r3, #13
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e01c      	b.n	800154a <_LCD_DrawChar+0x10e>
                if (temp&0x01)
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	d005      	beq.n	8001528 <_LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 800151c:	1cbb      	adds	r3, r7, #2
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7fe ffe7 	bl	80004f4 <LCD_WriteData16>
 8001526:	e004      	b.n	8001532 <_LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8001528:	003b      	movs	r3, r7
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	f7fe ffe1 	bl	80004f4 <LCD_WriteData16>
                temp>>=1;
 8001532:	220f      	movs	r2, #15
 8001534:	18bb      	adds	r3, r7, r2
 8001536:	18ba      	adds	r2, r7, r2
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	0852      	lsrs	r2, r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 800153e:	210d      	movs	r1, #13
 8001540:	187b      	adds	r3, r7, r1
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	187b      	adds	r3, r7, r1
 8001546:	3201      	adds	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	2324      	movs	r3, #36	; 0x24
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	220d      	movs	r2, #13
 8001556:	18ba      	adds	r2, r7, r2
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3d8      	bcc.n	8001510 <_LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 800155e:	210e      	movs	r1, #14
 8001560:	187b      	adds	r3, r7, r1
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	187b      	adds	r3, r7, r1
 8001566:	3201      	adds	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	230e      	movs	r3, #14
 800156c:	18fa      	adds	r2, r7, r3
 800156e:	2324      	movs	r3, #36	; 0x24
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3a2      	bcc.n	80014c0 <_LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 800157a:	f7fe ffd1 	bl	8000520 <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 800157e:	e06b      	b.n	8001658 <_LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8001580:	230e      	movs	r3, #14
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e05e      	b.n	8001648 <_LCD_DrawChar+0x20c>
            if (size==12)
 800158a:	2324      	movs	r3, #36	; 0x24
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d110      	bne.n	80015b6 <_LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8001594:	2320      	movs	r3, #32
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	230e      	movs	r3, #14
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	7818      	ldrb	r0, [r3, #0]
 80015a0:	230f      	movs	r3, #15
 80015a2:	18f9      	adds	r1, r7, r3
 80015a4:	4c2e      	ldr	r4, [pc, #184]	; (8001660 <_LCD_DrawChar+0x224>)
 80015a6:	0013      	movs	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	18e3      	adds	r3, r4, r3
 80015b0:	5c1b      	ldrb	r3, [r3, r0]
 80015b2:	700b      	strb	r3, [r1, #0]
 80015b4:	e00c      	b.n	80015d0 <_LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 80015b6:	2320      	movs	r3, #32
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	7819      	ldrb	r1, [r3, #0]
 80015bc:	230e      	movs	r3, #14
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	230f      	movs	r3, #15
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <_LCD_DrawChar+0x228>)
 80015c8:	0109      	lsls	r1, r1, #4
 80015ca:	1841      	adds	r1, r0, r1
 80015cc:	5c8a      	ldrb	r2, [r1, r2]
 80015ce:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 80015d0:	230d      	movs	r3, #13
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e026      	b.n	8001628 <_LCD_DrawChar+0x1ec>
                if(temp&0x01)
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d014      	beq.n	8001610 <_LCD_DrawChar+0x1d4>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 80015e6:	230d      	movs	r3, #13
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	18d3      	adds	r3, r2, r3
 80015f4:	b298      	uxth	r0, r3
 80015f6:	230e      	movs	r3, #14
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	b299      	uxth	r1, r3
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	001a      	movs	r2, r3
 800160c:	f7ff fa56 	bl	8000abc <_LCD_DrawPoint>
                temp>>=1;
 8001610:	220f      	movs	r2, #15
 8001612:	18bb      	adds	r3, r7, r2
 8001614:	18ba      	adds	r2, r7, r2
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	0852      	lsrs	r2, r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 800161c:	210d      	movs	r1, #13
 800161e:	187b      	adds	r3, r7, r1
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	187b      	adds	r3, r7, r1
 8001624:	3201      	adds	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	2324      	movs	r3, #36	; 0x24
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	220d      	movs	r2, #13
 8001634:	18ba      	adds	r2, r7, r2
 8001636:	7812      	ldrb	r2, [r2, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3ce      	bcc.n	80015da <_LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 800163c:	210e      	movs	r1, #14
 800163e:	187b      	adds	r3, r7, r1
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	187b      	adds	r3, r7, r1
 8001644:	3201      	adds	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	230e      	movs	r3, #14
 800164a:	18fa      	adds	r2, r7, r3
 800164c:	2324      	movs	r3, #36	; 0x24
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d398      	bcc.n	800158a <_LCD_DrawChar+0x14e>
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bdb0      	pop	{r4, r5, r7, pc}
 8001660:	08007e50 	.word	0x08007e50
 8001664:	080082c4 	.word	0x080082c4

08001668 <LCD_DrawChar>:

void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af04      	add	r7, sp, #16
 800166e:	0005      	movs	r5, r0
 8001670:	000c      	movs	r4, r1
 8001672:	0010      	movs	r0, r2
 8001674:	0019      	movs	r1, r3
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	1c2a      	adds	r2, r5, #0
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	1c22      	adds	r2, r4, #0
 8001680:	801a      	strh	r2, [r3, #0]
 8001682:	1cbb      	adds	r3, r7, #2
 8001684:	1c02      	adds	r2, r0, #0
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	003b      	movs	r3, r7
 800168a:	1c0a      	adds	r2, r1, #0
 800168c:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <LCD_DrawChar+0x6c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2001      	movs	r0, #1
 8001694:	4798      	blx	r3
    _LCD_DrawChar(x,y,fc,bc,num,size,mode);
 8001696:	003b      	movs	r3, r7
 8001698:	881c      	ldrh	r4, [r3, #0]
 800169a:	1cbb      	adds	r3, r7, #2
 800169c:	881a      	ldrh	r2, [r3, #0]
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	8819      	ldrh	r1, [r3, #0]
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	8818      	ldrh	r0, [r3, #0]
 80016a6:	2320      	movs	r3, #32
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	231c      	movs	r3, #28
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2318      	movs	r3, #24
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	0023      	movs	r3, r4
 80016c0:	f7ff febc 	bl	800143c <_LCD_DrawChar>
    lcddev.select(0);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <LCD_DrawChar+0x6c>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2000      	movs	r0, #0
 80016ca:	4798      	blx	r3
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	20000adc 	.word	0x20000adc

080016d8 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af04      	add	r7, sp, #16
 80016de:	0005      	movs	r5, r0
 80016e0:	000c      	movs	r4, r1
 80016e2:	0010      	movs	r0, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	1dbb      	adds	r3, r7, #6
 80016e8:	1c2a      	adds	r2, r5, #0
 80016ea:	801a      	strh	r2, [r3, #0]
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	1c22      	adds	r2, r4, #0
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	1c02      	adds	r2, r0, #0
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	003b      	movs	r3, r7
 80016fa:	1c0a      	adds	r2, r1, #0
 80016fc:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <LCD_DrawString+0xc0>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2001      	movs	r0, #1
 8001704:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 8001706:	e035      	b.n	8001774 <LCD_DrawString+0x9c>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <LCD_DrawString+0xc0>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	1dba      	adds	r2, r7, #6
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d23c      	bcs.n	800178e <LCD_DrawString+0xb6>
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <LCD_DrawString+0xc0>)
 8001716:	885b      	ldrh	r3, [r3, #2]
 8001718:	1d3a      	adds	r2, r7, #4
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d236      	bcs.n	800178e <LCD_DrawString+0xb6>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	003a      	movs	r2, r7
 8001726:	8815      	ldrh	r5, [r2, #0]
 8001728:	1cba      	adds	r2, r7, #2
 800172a:	8814      	ldrh	r4, [r2, #0]
 800172c:	1d3a      	adds	r2, r7, #4
 800172e:	8811      	ldrh	r1, [r2, #0]
 8001730:	1dba      	adds	r2, r7, #6
 8001732:	8810      	ldrh	r0, [r2, #0]
 8001734:	2220      	movs	r2, #32
 8001736:	2608      	movs	r6, #8
 8001738:	1992      	adds	r2, r2, r6
 800173a:	19d2      	adds	r2, r2, r7
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	9202      	str	r2, [sp, #8]
 8001740:	261c      	movs	r6, #28
 8001742:	2208      	movs	r2, #8
 8001744:	18b2      	adds	r2, r6, r2
 8001746:	19d2      	adds	r2, r2, r7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	9201      	str	r2, [sp, #4]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	002b      	movs	r3, r5
 8001750:	0022      	movs	r2, r4
 8001752:	f7ff fe73 	bl	800143c <_LCD_DrawChar>
        x+=size/2;
 8001756:	2308      	movs	r3, #8
 8001758:	18f3      	adds	r3, r6, r3
 800175a:	19db      	adds	r3, r3, r7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	b299      	uxth	r1, r3
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	1dba      	adds	r2, r7, #6
 8001768:	8812      	ldrh	r2, [r2, #0]
 800176a:	188a      	adds	r2, r1, r2
 800176c:	801a      	strh	r2, [r3, #0]
        p++;
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	3301      	adds	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b7e      	cmp	r3, #126	; 0x7e
 800177a:	d803      	bhi.n	8001784 <LCD_DrawString+0xac>
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b1f      	cmp	r3, #31
 8001782:	d8c1      	bhi.n	8001708 <LCD_DrawString+0x30>
    }
    lcddev.select(0);
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <LCD_DrawString+0xc0>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2000      	movs	r0, #0
 800178a:	4798      	blx	r3
 800178c:	e000      	b.n	8001790 <LCD_DrawString+0xb8>
        return;
 800178e:	46c0      	nop			; (mov r8, r8)
}
 8001790:	46bd      	mov	sp, r7
 8001792:	b003      	add	sp, #12
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	20000adc 	.word	0x20000adc

0800179c <LCD_DrawPicture>:

//===========================================================================
// Draw a picture with upper left corner at (x0,y0).
//===========================================================================
void LCD_DrawPicture(u16 x0, u16 y0, const Picture *pic)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	603a      	str	r2, [r7, #0]
 80017a4:	1dbb      	adds	r3, r7, #6
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	1c0a      	adds	r2, r1, #0
 80017ae:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <LCD_DrawPicture+0x104>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2001      	movs	r0, #1
 80017b6:	4798      	blx	r3
    u16 x1 = x0 + pic->width-1;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	1dbb      	adds	r3, r7, #6
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	18d3      	adds	r3, r2, r3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	2312      	movs	r3, #18
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	3a01      	subs	r2, #1
 80017cc:	801a      	strh	r2, [r3, #0]
    u16 y1 = y0 + pic->height-1;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	2310      	movs	r3, #16
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	3a01      	subs	r2, #1
 80017e2:	801a      	strh	r2, [r3, #0]
    // No error handling.  Just loop forever if out-of-bounds.
    while (x0 >= lcddev.width)
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <LCD_DrawPicture+0x104>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	1dba      	adds	r2, r7, #6
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d2f9      	bcs.n	80017e6 <LCD_DrawPicture+0x4a>
        ;
    while (x1 >= lcddev.width)
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <LCD_DrawPicture+0x104>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	2212      	movs	r2, #18
 80017fa:	18ba      	adds	r2, r7, r2
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d2f8      	bcs.n	80017f4 <LCD_DrawPicture+0x58>
        ;
    while (y0 >= lcddev.height)
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <LCD_DrawPicture+0x104>)
 8001806:	885b      	ldrh	r3, [r3, #2]
 8001808:	1d3a      	adds	r2, r7, #4
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d2f9      	bcs.n	8001804 <LCD_DrawPicture+0x68>
        ;
    while (y1 >= lcddev.height)
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <LCD_DrawPicture+0x104>)
 8001814:	885b      	ldrh	r3, [r3, #2]
 8001816:	2110      	movs	r1, #16
 8001818:	187a      	adds	r2, r7, r1
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d2f8      	bcs.n	8001812 <LCD_DrawPicture+0x76>
        ;
    LCD_SetWindow(x0,y0,x1,y1);
 8001820:	187b      	adds	r3, r7, r1
 8001822:	881c      	ldrh	r4, [r3, #0]
 8001824:	2312      	movs	r3, #18
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	8819      	ldrh	r1, [r3, #0]
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	8818      	ldrh	r0, [r3, #0]
 8001832:	0023      	movs	r3, r4
 8001834:	f7ff f8a0 	bl	8000978 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8001838:	f7fe fe48 	bl	80004cc <LCD_WriteData16_Prepare>

    u16 *data = (u16 *)pic->pixel_data;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	330c      	adds	r3, #12
 8001840:	60fb      	str	r3, [r7, #12]
    for(int y=0; y<pic->height; y++) {
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e01c      	b.n	8001882 <LCD_DrawPicture+0xe6>
        u16 *row = &data[y * pic->width];
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	4353      	muls	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	61bb      	str	r3, [r7, #24]
        for(int x=0; x<pic->width; x++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e009      	b.n	8001872 <LCD_DrawPicture+0xd6>
            LCD_WriteData16(*row++);
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1c9a      	adds	r2, r3, #2
 8001862:	61ba      	str	r2, [r7, #24]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	0018      	movs	r0, r3
 8001868:	f7fe fe44 	bl	80004f4 <LCD_WriteData16>
        for(int x=0; x<pic->width; x++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f0      	bhi.n	800185e <LCD_DrawPicture+0xc2>
    for(int y=0; y<pic->height; y++) {
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3301      	adds	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8dd      	bhi.n	8001848 <LCD_DrawPicture+0xac>
    }

    LCD_WriteData16_End();
 800188c:	f7fe fe48 	bl	8000520 <LCD_WriteData16_End>
    lcddev.select(0);
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <LCD_DrawPicture+0x104>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2000      	movs	r0, #0
 8001896:	4798      	blx	r3
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b009      	add	sp, #36	; 0x24
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	20000adc 	.word	0x20000adc

080018a4 <setup_bb>:

// Write your subroutines below

int wait = 1000000;

void setup_bb(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <setup_bb+0x40>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <setup_bb+0x40>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	02c9      	lsls	r1, r1, #11
 80018b2:	430a      	orrs	r2, r1
 80018b4:	615a      	str	r2, [r3, #20]
	//GPIOB->MODER &= 0x0;
	GPIOB->MODER |= GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <setup_bb+0x44>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <setup_bb+0x44>)
 80018bc:	218a      	movs	r1, #138	; 0x8a
 80018be:	05c9      	lsls	r1, r1, #23
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
	//GPIOB->MODER |= 0xB000;

	// Initialize the ODR so that NSS (PA12) is high and SCK (PA13) is low
	GPIOB->ODR |= GPIO_ODR_12;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <setup_bb+0x44>)
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <setup_bb+0x44>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0149      	lsls	r1, r1, #5
 80018ce:	430a      	orrs	r2, r1
 80018d0:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~GPIO_ODR_13;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <setup_bb+0x44>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <setup_bb+0x44>)
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <setup_bb+0x48>)
 80018da:	400a      	ands	r2, r1
 80018dc:	615a      	str	r2, [r3, #20]
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	ffffdfff 	.word	0xffffdfff

080018f0 <small_delay>:

void small_delay(int t){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	nano_wait(t);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7fe fd82 	bl	8000404 <nano_wait>
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}

08001908 <bb_write_bit>:

void bb_write_bit(int bit){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

	// Set the MOSI pin to the value of the parameter (0 or 1)
	if (bit) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <bb_write_bit+0x18>
		GPIOB->BSRR = GPIO_BSRR_BS_15;  // Set MOSI (PB15) to 1
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <bb_write_bit+0x4c>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	0212      	lsls	r2, r2, #8
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	e003      	b.n	8001928 <bb_write_bit+0x20>
	}
	else {
		GPIOB->BSRR = GPIO_BSRR_BR_15;  // Clear MOSI (PB15) to 0
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <bb_write_bit+0x4c>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0612      	lsls	r2, r2, #24
 8001926:	619a      	str	r2, [r3, #24]
	}

	small_delay(wait);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <bb_write_bit+0x50>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ffdf 	bl	80018f0 <small_delay>

	// Set the SCK pin to high
	GPIOB->BSRR = GPIO_BSRR_BS_13;  // Set SCK (PB13) to high
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <bb_write_bit+0x4c>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0192      	lsls	r2, r2, #6
 8001938:	619a      	str	r2, [r3, #24]

	small_delay(wait);
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <bb_write_bit+0x50>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ffd6 	bl	80018f0 <small_delay>

	// Set the SCK pin to low
	GPIOB->BSRR = GPIO_BSRR_BR_13;  // Clear SCK (PB13) to low
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <bb_write_bit+0x4c>)
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0592      	lsls	r2, r2, #22
 800194a:	619a      	str	r2, [r3, #24]
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	48000400 	.word	0x48000400
 8001958:	20000000 	.word	0x20000000

0800195c <bb_write_byte>:


void bb_write_byte(int byte){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	int bit;

	// for 8 bits
	for(int i = 7; i >= 0; i--){
 8001964:	2307      	movs	r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e00f      	b.n	800198a <bb_write_byte+0x2e>

		// get value of LSB
		bit = byte >> i;
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	411a      	asrs	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
		bit = bit & 0x1;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]

		// write bit to LCD
		bb_write_bit(bit);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ffc2 	bl	8001908 <bb_write_bit>
	for(int i = 7; i >= 0; i--){
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3b01      	subs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	daec      	bge.n	800196a <bb_write_byte+0xe>
	}
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <bb_cmd>:

void bb_cmd(int cmd){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

	// Set the NSS pin low to start an SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BR_12;  // Clear NSS (PB12) to low
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <bb_cmd+0x54>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	0552      	lsls	r2, r2, #21
 80019aa:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <bb_cmd+0x58>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff ff9d 	bl	80018f0 <small_delay>

	// Send command bits: RS=0 (Register Select), R/W=0 (Write)
	bb_write_bit(0);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff ffa6 	bl	8001908 <bb_write_bit>
	bb_write_bit(0);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff ffa3 	bl	8001908 <bb_write_bit>

	// Send the command byte
	bb_write_byte(cmd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ffc9 	bl	800195c <bb_write_byte>
	small_delay(wait);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <bb_cmd+0x58>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff ff8e 	bl	80018f0 <small_delay>

	// Set the NSS pin high to signal the end of the SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BS_12;  // Set NSS (PB12) to high
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <bb_cmd+0x54>)
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	0152      	lsls	r2, r2, #5
 80019da:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <bb_cmd+0x58>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff ff85 	bl	80018f0 <small_delay>
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	48000400 	.word	0x48000400
 80019f4:	20000000 	.word	0x20000000

080019f8 <bb_data>:


void bb_data(int data){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	// Set the NSS pin low to start an SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BR_12;  // Clear NSS (PB12) to low
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <bb_data+0x54>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0552      	lsls	r2, r2, #21
 8001a06:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <bb_data+0x58>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff6f 	bl	80018f0 <small_delay>

	// Send command bits: RS=0 (Register Select), R/W=0 (Write)
	bb_write_bit(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff ff78 	bl	8001908 <bb_write_bit>
	bb_write_bit(0);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ff75 	bl	8001908 <bb_write_bit>

	// Send the command byte
	bb_write_byte(data);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff9b 	bl	800195c <bb_write_byte>
	small_delay(wait);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <bb_data+0x58>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff ff60 	bl	80018f0 <small_delay>

	// Set the NSS pin high to signal the end of the SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BS_12;  // Set NSS (PB12) to high
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <bb_data+0x54>)
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	0152      	lsls	r2, r2, #5
 8001a36:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <bb_data+0x58>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ff57 	bl	80018f0 <small_delay>
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	20000000 	.word	0x20000000

08001a54 <bb_init_oled>:


void bb_init_oled(void){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

	// Wait for 1 ms for the display to power up and stabilize
	small_delay(2000000);
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <bb_init_oled+0x40>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff ff48 	bl	80018f0 <small_delay>

	// Initialize the OLED display with the specified commands
	bb_cmd(0x38);  // Set for 8-bit operation
 8001a60:	2038      	movs	r0, #56	; 0x38
 8001a62:	f7ff ff9b 	bl	800199c <bb_cmd>
	bb_cmd(0x08);  // Turn display off
 8001a66:	2008      	movs	r0, #8
 8001a68:	f7ff ff98 	bl	800199c <bb_cmd>
	bb_cmd(0x01);  // Clear display
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ff95 	bl	800199c <bb_cmd>

	// Wait for 2 ms for the display to clear
	small_delay(2000000);
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <bb_init_oled+0x40>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff3b 	bl	80018f0 <small_delay>

	bb_cmd(0x06);  // Set the display to scroll
 8001a7a:	2006      	movs	r0, #6
 8001a7c:	f7ff ff8e 	bl	800199c <bb_cmd>
	bb_cmd(0x02);  // Move the cursor to the home position
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff ff8b 	bl	800199c <bb_cmd>
	bb_cmd(0x0C);  // Turn the display on
 8001a86:	200c      	movs	r0, #12
 8001a88:	f7ff ff88 	bl	800199c <bb_cmd>
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	001e8480 	.word	0x001e8480

08001a98 <bb_display1>:

void bb_display1(const char * str){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	bb_cmd(0x02); // move the cursor to the home position
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff ff7b 	bl	800199c <bb_cmd>

	for(int i = 0; i < sizeof(str); i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e00e      	b.n	8001aca <bb_display1+0x32>
		if(*str != '\0'){
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <bb_display1+0x26>
			bb_data(*str);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff ff9d 	bl	80019f8 <bb_data>
		}
		str++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < sizeof(str); i++){
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d9ed      	bls.n	8001aac <bb_display1+0x14>
	}
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <show_counter>:

void show_counter(short buffer[])
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    for(int i=0; i<10000; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae8:	e022      	b.n	8001b30 <show_counter+0x54>
        char line[33];
        sprintf(line,"% 32d", i);
 8001aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aec:	4915      	ldr	r1, [pc, #84]	; (8001b44 <show_counter+0x68>)
 8001aee:	230c      	movs	r3, #12
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 fa90 	bl	8002018 <siprintf>
        for(int b=0; b<32; b++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
 8001afc:	e012      	b.n	8001b24 <show_counter+0x48>
            buffer[1+b] = line[b] | 0x200;
 8001afe:	230c      	movs	r3, #12
 8001b00:	18fa      	adds	r2, r7, r3
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	18cb      	adds	r3, r1, r3
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	0089      	lsls	r1, r1, #2
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	b212      	sxth	r2, r2
 8001b1c:	801a      	strh	r2, [r3, #0]
        for(int b=0; b<32; b++)
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	3301      	adds	r3, #1
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	2b1f      	cmp	r3, #31
 8001b28:	dde9      	ble.n	8001afe <show_counter+0x22>
    for(int i=0; i<10000; i++) {
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <show_counter+0x6c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	ddd8      	ble.n	8001aea <show_counter+0xe>
    }
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b00e      	add	sp, #56	; 0x38
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	0800296c 	.word	0x0800296c
 8001b48:	0000270f 	.word	0x0000270f

08001b4c <main>:
void autotest();

extern const Picture *image;

int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b096      	sub	sp, #88	; 0x58
 8001b50:	af04      	add	r7, sp, #16
    //internal_clock();
    //demo();
    //autotest();

    setup_bb();
 8001b52:	f7ff fea7 	bl	80018a4 <setup_bb>
    bb_init_oled();
 8001b56:	f7ff ff7d 	bl	8001a54 <bb_init_oled>
    bb_display1("ASL is cool");
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <main+0x118>)
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff ff9b 	bl	8001a98 <bb_display1>
    //setup_spi2();
    //spi_init_oled();
    //spi_display1("Hello again,");
    //spi_display2(login);

    short buffer[34] = {
 8001b62:	1d3a      	adds	r2, r7, #4
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <main+0x11c>)
 8001b66:	0010      	movs	r0, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	2344      	movs	r3, #68	; 0x44
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	f000 fa9f 	bl	80020b0 <memcpy>
            0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
    };

    //spi_setup_dma(buffer);
    //enable_dma();
    show_counter(buffer);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff ffb1 	bl	8001adc <show_counter>

    //setup_spi1();
    LCD_Init(0,0,0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7fe fda8 	bl	80006d4 <LCD_Init>
    LCD_Clear(BLACK);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7fe ff57 	bl	8000a38 <LCD_Clear>
    LCD_DrawLine(10,20,100,200, WHITE);
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <main+0x120>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	23c8      	movs	r3, #200	; 0xc8
 8001b90:	2264      	movs	r2, #100	; 0x64
 8001b92:	2114      	movs	r1, #20
 8001b94:	200a      	movs	r0, #10
 8001b96:	f7ff f84f 	bl	8000c38 <LCD_DrawLine>
    LCD_DrawRectangle(10,20,100,200, GREEN);
 8001b9a:	23fc      	movs	r3, #252	; 0xfc
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	23c8      	movs	r3, #200	; 0xc8
 8001ba2:	2264      	movs	r2, #100	; 0x64
 8001ba4:	2114      	movs	r1, #20
 8001ba6:	200a      	movs	r0, #10
 8001ba8:	f7ff f876 	bl	8000c98 <LCD_DrawRectangle>
    LCD_DrawFillRectangle(120,20,220,200, RED);
 8001bac:	23f8      	movs	r3, #248	; 0xf8
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	23c8      	movs	r3, #200	; 0xc8
 8001bb4:	22dc      	movs	r2, #220	; 0xdc
 8001bb6:	2114      	movs	r1, #20
 8001bb8:	2078      	movs	r0, #120	; 0x78
 8001bba:	f7ff f92d 	bl	8000e18 <LCD_DrawFillRectangle>
    LCD_Circle(50, 260, 50, 1, BLUE);
 8001bbe:	2382      	movs	r3, #130	; 0x82
 8001bc0:	0059      	lsls	r1, r3, #1
 8001bc2:	231f      	movs	r3, #31
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2232      	movs	r2, #50	; 0x32
 8001bca:	2032      	movs	r0, #50	; 0x32
 8001bcc:	f7ff f9f2 	bl	8000fb4 <LCD_Circle>
    LCD_DrawFillTriangle(130,130, 130,200, 190,160, YELLOW);
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <main+0x124>)
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	23a0      	movs	r3, #160	; 0xa0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	23be      	movs	r3, #190	; 0xbe
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	23c8      	movs	r3, #200	; 0xc8
 8001bde:	2282      	movs	r2, #130	; 0x82
 8001be0:	2182      	movs	r1, #130	; 0x82
 8001be2:	2082      	movs	r0, #130	; 0x82
 8001be4:	f7ff fa8a 	bl	80010fc <LCD_DrawFillTriangle>
    LCD_DrawChar(150,155, BLACK, WHITE, 'X', 16, 1);
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <main+0x120>)
 8001bea:	2301      	movs	r3, #1
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2310      	movs	r3, #16
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	2358      	movs	r3, #88	; 0x58
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	219b      	movs	r1, #155	; 0x9b
 8001bfc:	2096      	movs	r0, #150	; 0x96
 8001bfe:	f7ff fd33 	bl	8001668 <LCD_DrawChar>
    LCD_DrawString(140,60,  WHITE, BLACK, "ECE 362", 16, 0);
 8001c02:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <main+0x120>)
 8001c04:	2300      	movs	r3, #0
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2310      	movs	r3, #16
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <main+0x128>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2300      	movs	r3, #0
 8001c12:	213c      	movs	r1, #60	; 0x3c
 8001c14:	208c      	movs	r0, #140	; 0x8c
 8001c16:	f7ff fd5f 	bl	80016d8 <LCD_DrawString>
    LCD_DrawString(140,80,  WHITE, BLACK, "has the", 16, 1);
 8001c1a:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <main+0x120>)
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	2310      	movs	r3, #16
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <main+0x12c>)
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2150      	movs	r1, #80	; 0x50
 8001c2c:	208c      	movs	r0, #140	; 0x8c
 8001c2e:	f7ff fd53 	bl	80016d8 <LCD_DrawString>
    LCD_DrawString(130,100, BLACK, GREEN, "best toys", 16, 0);
 8001c32:	23fc      	movs	r3, #252	; 0xfc
 8001c34:	00da      	lsls	r2, r3, #3
 8001c36:	2300      	movs	r3, #0
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <main+0x130>)
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	0013      	movs	r3, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	2164      	movs	r1, #100	; 0x64
 8001c48:	2082      	movs	r0, #130	; 0x82
 8001c4a:	f7ff fd45 	bl	80016d8 <LCD_DrawString>
    LCD_DrawPicture(110,220,(const Picture *)&image);
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <main+0x134>)
 8001c50:	001a      	movs	r2, r3
 8001c52:	21dc      	movs	r1, #220	; 0xdc
 8001c54:	206e      	movs	r0, #110	; 0x6e
 8001c56:	f7ff fda1 	bl	800179c <LCD_DrawPicture>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b012      	add	sp, #72	; 0x48
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	08002974 	.word	0x08002974
 8001c68:	0800299c 	.word	0x0800299c
 8001c6c:	0000ffff 	.word	0x0000ffff
 8001c70:	0000ffe0 	.word	0x0000ffe0
 8001c74:	08002980 	.word	0x08002980
 8001c78:	08002988 	.word	0x08002988
 8001c7c:	08002990 	.word	0x08002990
 8001c80:	080029e0 	.word	0x080029e0

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f86a 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f000 f9b8 	bl	8002058 <__errno>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	18d2      	adds	r2, r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b006      	add	sp, #24
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20008000 	.word	0x20008000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	20000af8 	.word	0x20000af8
 8001d1c:	20000c48 	.word	0x20000c48

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7ff fff6 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d5a:	f000 f983 	bl	8002064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff fef5 	bl	8001b4c <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   r0, =_estack
 8001d64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001d70:	080088f0 	.word	0x080088f0
  ldr r2, =_sbss
 8001d74:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001d78:	20000c48 	.word	0x20000c48

08001d7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_COMP_IRQHandler>
	...

08001d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x1c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	001a      	movs	r2, r3
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x20>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	18d2      	adds	r2, r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_IncTick+0x20>)
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000afc 	.word	0x20000afc

08001da4 <TIM16_IRQHandler>:
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <TIM16_IRQHandler+0x20>)
 8001daa:	8a1b      	ldrh	r3, [r3, #16]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <TIM16_IRQHandler+0x20>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	438b      	bics	r3, r1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8213      	strh	r3, [r2, #16]
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <TIM16_IRQHandler+0x24>)
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <TIM16_IRQHandler+0x28>)
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40014400 	.word	0x40014400
 8001dc8:	40003000 	.word	0x40003000
 8001dcc:	0000aaaa 	.word	0x0000aaaa

08001dd0 <internal_show_digit>:
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <internal_show_digit+0x38>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <internal_show_digit+0x38>)
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <internal_show_digit+0x38>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <internal_show_digit+0x38>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	0019      	movs	r1, r3
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <internal_show_digit+0x3c>)
 8001df2:	5c5b      	ldrb	r3, [r3, r1]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <internal_show_digit+0x40>)
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	829a      	strh	r2, [r3, #20]
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	200006b4 	.word	0x200006b4
 8001e0c:	200006c8 	.word	0x200006c8
 8001e10:	48000800 	.word	0x48000800

08001e14 <internal_set_row>:
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <internal_set_row+0x24>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	2303      	movs	r3, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	2201      	movs	r2, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	22f0      	movs	r2, #240	; 0xf0
 8001e2a:	0312      	lsls	r2, r2, #12
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <internal_set_row+0x28>)
 8001e30:	619a      	str	r2, [r3, #24]
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200006b4 	.word	0x200006b4
 8001e3c:	48000400 	.word	0x48000400

08001e40 <internal_get_cols>:
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <internal_get_cols+0x1c>)
 8001e46:	8a1b      	ldrh	r3, [r3, #16]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	001a      	movs	r2, r3
 8001e50:	230f      	movs	r3, #15
 8001e52:	4013      	ands	r3, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	48000400 	.word	0x48000400

08001e60 <internal_insert_queue>:
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <internal_insert_queue+0x3c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3a80      	subs	r2, #128	; 0x80
 8001e72:	b2d1      	uxtb	r1, r2
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <internal_insert_queue+0x40>)
 8001e76:	54d1      	strb	r1, [r2, r3]
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <internal_insert_queue+0x3c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <internal_insert_queue+0x44>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	d504      	bpl.n	8001e8e <internal_insert_queue+0x2e>
 8001e84:	3b01      	subs	r3, #1
 8001e86:	2202      	movs	r2, #2
 8001e88:	4252      	negs	r2, r2
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	001a      	movs	r2, r3
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <internal_insert_queue+0x3c>)
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200006d4 	.word	0x200006d4
 8001ea0:	200006d0 	.word	0x200006d0
 8001ea4:	80000001 	.word	0x80000001

08001ea8 <internal_update_hist>:
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <internal_update_hist+0x108>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	009a      	lsls	r2, r3, #2
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <internal_update_hist+0x10c>)
 8001ec2:	18d3      	adds	r3, r2, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	b25a      	sxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	1e59      	subs	r1, r3, #1
 8001ed6:	418b      	sbcs	r3, r1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	b25a      	sxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	1e59      	subs	r1, r3, #1
 8001ef8:	418b      	sbcs	r3, r1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b25a      	sxtb	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2104      	movs	r1, #4
 8001f18:	400b      	ands	r3, r1
 8001f1a:	1e59      	subs	r1, r3, #1
 8001f1c:	418b      	sbcs	r3, r1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3303      	adds	r3, #3
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	b25a      	sxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	1e59      	subs	r1, r3, #1
 8001f40:	418b      	sbcs	r3, r1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d104      	bne.n	8001f64 <internal_update_hist+0xbc>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff ff7e 	bl	8001e60 <internal_insert_queue>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3301      	adds	r3, #1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <internal_update_hist+0xd2>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3301      	adds	r3, #1
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff ff73 	bl	8001e60 <internal_insert_queue>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <internal_update_hist+0xe8>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ff68 	bl	8001e60 <internal_insert_queue>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3303      	adds	r3, #3
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <internal_update_hist+0xfe>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <internal_insert_queue>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200006b4 	.word	0x200006b4
 8001fb4:	200006b8 	.word	0x200006b8

08001fb8 <TIM17_IRQHandler>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <TIM17_IRQHandler+0x54>)
 8001fc0:	8a1b      	ldrh	r3, [r3, #16]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <TIM17_IRQHandler+0x54>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	438b      	bics	r3, r1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8213      	strh	r3, [r2, #16]
 8001fce:	f7ff feff 	bl	8001dd0 <internal_show_digit>
 8001fd2:	f7ff ff35 	bl	8001e40 <internal_get_cols>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ff63 	bl	8001ea8 <internal_update_hist>
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <TIM17_IRQHandler+0x58>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <TIM17_IRQHandler+0x5c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	d504      	bpl.n	8001ff8 <TIM17_IRQHandler+0x40>
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <TIM17_IRQHandler+0x58>)
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	f7ff ff09 	bl	8001e14 <internal_set_row>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40014800 	.word	0x40014800
 8002010:	200006b4 	.word	0x200006b4
 8002014:	80000007 	.word	0x80000007

08002018 <siprintf>:
 8002018:	b40e      	push	{r1, r2, r3}
 800201a:	b500      	push	{lr}
 800201c:	490b      	ldr	r1, [pc, #44]	; (800204c <siprintf+0x34>)
 800201e:	b09c      	sub	sp, #112	; 0x70
 8002020:	ab1d      	add	r3, sp, #116	; 0x74
 8002022:	9002      	str	r0, [sp, #8]
 8002024:	9006      	str	r0, [sp, #24]
 8002026:	9107      	str	r1, [sp, #28]
 8002028:	9104      	str	r1, [sp, #16]
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <siprintf+0x38>)
 800202c:	4909      	ldr	r1, [pc, #36]	; (8002054 <siprintf+0x3c>)
 800202e:	cb04      	ldmia	r3!, {r2}
 8002030:	9105      	str	r1, [sp, #20]
 8002032:	6800      	ldr	r0, [r0, #0]
 8002034:	a902      	add	r1, sp, #8
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f000 f8a6 	bl	8002188 <_svfiprintf_r>
 800203c:	2200      	movs	r2, #0
 800203e:	9b02      	ldr	r3, [sp, #8]
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	b01c      	add	sp, #112	; 0x70
 8002044:	bc08      	pop	{r3}
 8002046:	b003      	add	sp, #12
 8002048:	4718      	bx	r3
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	7fffffff 	.word	0x7fffffff
 8002050:	20000054 	.word	0x20000054
 8002054:	ffff0208 	.word	0xffff0208

08002058 <__errno>:
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <__errno+0x8>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	4770      	bx	lr
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	20000054 	.word	0x20000054

08002064 <__libc_init_array>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	2600      	movs	r6, #0
 8002068:	4c0c      	ldr	r4, [pc, #48]	; (800209c <__libc_init_array+0x38>)
 800206a:	4d0d      	ldr	r5, [pc, #52]	; (80020a0 <__libc_init_array+0x3c>)
 800206c:	1b64      	subs	r4, r4, r5
 800206e:	10a4      	asrs	r4, r4, #2
 8002070:	42a6      	cmp	r6, r4
 8002072:	d109      	bne.n	8002088 <__libc_init_array+0x24>
 8002074:	2600      	movs	r6, #0
 8002076:	f000 fc6d 	bl	8002954 <_init>
 800207a:	4c0a      	ldr	r4, [pc, #40]	; (80020a4 <__libc_init_array+0x40>)
 800207c:	4d0a      	ldr	r5, [pc, #40]	; (80020a8 <__libc_init_array+0x44>)
 800207e:	1b64      	subs	r4, r4, r5
 8002080:	10a4      	asrs	r4, r4, #2
 8002082:	42a6      	cmp	r6, r4
 8002084:	d105      	bne.n	8002092 <__libc_init_array+0x2e>
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	00b3      	lsls	r3, r6, #2
 800208a:	58eb      	ldr	r3, [r5, r3]
 800208c:	4798      	blx	r3
 800208e:	3601      	adds	r6, #1
 8002090:	e7ee      	b.n	8002070 <__libc_init_array+0xc>
 8002092:	00b3      	lsls	r3, r6, #2
 8002094:	58eb      	ldr	r3, [r5, r3]
 8002096:	4798      	blx	r3
 8002098:	3601      	adds	r6, #1
 800209a:	e7f2      	b.n	8002082 <__libc_init_array+0x1e>
 800209c:	080088e8 	.word	0x080088e8
 80020a0:	080088e8 	.word	0x080088e8
 80020a4:	080088ec 	.word	0x080088ec
 80020a8:	080088e8 	.word	0x080088e8

080020ac <__retarget_lock_acquire_recursive>:
 80020ac:	4770      	bx	lr

080020ae <__retarget_lock_release_recursive>:
 80020ae:	4770      	bx	lr

080020b0 <memcpy>:
 80020b0:	2300      	movs	r3, #0
 80020b2:	b510      	push	{r4, lr}
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d100      	bne.n	80020ba <memcpy+0xa>
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	5ccc      	ldrb	r4, [r1, r3]
 80020bc:	54c4      	strb	r4, [r0, r3]
 80020be:	3301      	adds	r3, #1
 80020c0:	e7f8      	b.n	80020b4 <memcpy+0x4>
	...

080020c4 <__ssputs_r>:
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	9203      	str	r2, [sp, #12]
 80020cc:	688e      	ldr	r6, [r1, #8]
 80020ce:	9a01      	ldr	r2, [sp, #4]
 80020d0:	0007      	movs	r7, r0
 80020d2:	000c      	movs	r4, r1
 80020d4:	680b      	ldr	r3, [r1, #0]
 80020d6:	4296      	cmp	r6, r2
 80020d8:	d831      	bhi.n	800213e <__ssputs_r+0x7a>
 80020da:	898a      	ldrh	r2, [r1, #12]
 80020dc:	2190      	movs	r1, #144	; 0x90
 80020de:	00c9      	lsls	r1, r1, #3
 80020e0:	420a      	tst	r2, r1
 80020e2:	d029      	beq.n	8002138 <__ssputs_r+0x74>
 80020e4:	2003      	movs	r0, #3
 80020e6:	6921      	ldr	r1, [r4, #16]
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	6963      	ldr	r3, [r4, #20]
 80020ee:	4343      	muls	r3, r0
 80020f0:	0fdd      	lsrs	r5, r3, #31
 80020f2:	18ed      	adds	r5, r5, r3
 80020f4:	9b01      	ldr	r3, [sp, #4]
 80020f6:	9802      	ldr	r0, [sp, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	181b      	adds	r3, r3, r0
 80020fc:	106d      	asrs	r5, r5, #1
 80020fe:	42ab      	cmp	r3, r5
 8002100:	d900      	bls.n	8002104 <__ssputs_r+0x40>
 8002102:	001d      	movs	r5, r3
 8002104:	0552      	lsls	r2, r2, #21
 8002106:	d529      	bpl.n	800215c <__ssputs_r+0x98>
 8002108:	0029      	movs	r1, r5
 800210a:	0038      	movs	r0, r7
 800210c:	f000 f95e 	bl	80023cc <_malloc_r>
 8002110:	1e06      	subs	r6, r0, #0
 8002112:	d02d      	beq.n	8002170 <__ssputs_r+0xac>
 8002114:	9a02      	ldr	r2, [sp, #8]
 8002116:	6921      	ldr	r1, [r4, #16]
 8002118:	f7ff ffca 	bl	80020b0 <memcpy>
 800211c:	89a2      	ldrh	r2, [r4, #12]
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <__ssputs_r+0xc0>)
 8002120:	401a      	ands	r2, r3
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	4313      	orrs	r3, r2
 8002126:	81a3      	strh	r3, [r4, #12]
 8002128:	9b02      	ldr	r3, [sp, #8]
 800212a:	6126      	str	r6, [r4, #16]
 800212c:	18f6      	adds	r6, r6, r3
 800212e:	6026      	str	r6, [r4, #0]
 8002130:	6165      	str	r5, [r4, #20]
 8002132:	9e01      	ldr	r6, [sp, #4]
 8002134:	1aed      	subs	r5, r5, r3
 8002136:	60a5      	str	r5, [r4, #8]
 8002138:	9b01      	ldr	r3, [sp, #4]
 800213a:	429e      	cmp	r6, r3
 800213c:	d900      	bls.n	8002140 <__ssputs_r+0x7c>
 800213e:	9e01      	ldr	r6, [sp, #4]
 8002140:	0032      	movs	r2, r6
 8002142:	9903      	ldr	r1, [sp, #12]
 8002144:	6820      	ldr	r0, [r4, #0]
 8002146:	f000 fb82 	bl	800284e <memmove>
 800214a:	2000      	movs	r0, #0
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	1b9b      	subs	r3, r3, r6
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	199b      	adds	r3, r3, r6
 8002156:	6023      	str	r3, [r4, #0]
 8002158:	b005      	add	sp, #20
 800215a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215c:	002a      	movs	r2, r5
 800215e:	0038      	movs	r0, r7
 8002160:	f000 fb46 	bl	80027f0 <_realloc_r>
 8002164:	1e06      	subs	r6, r0, #0
 8002166:	d1df      	bne.n	8002128 <__ssputs_r+0x64>
 8002168:	0038      	movs	r0, r7
 800216a:	6921      	ldr	r1, [r4, #16]
 800216c:	f000 fba0 	bl	80028b0 <_free_r>
 8002170:	230c      	movs	r3, #12
 8002172:	2001      	movs	r0, #1
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	89a2      	ldrh	r2, [r4, #12]
 8002178:	3334      	adds	r3, #52	; 0x34
 800217a:	4313      	orrs	r3, r2
 800217c:	81a3      	strh	r3, [r4, #12]
 800217e:	4240      	negs	r0, r0
 8002180:	e7ea      	b.n	8002158 <__ssputs_r+0x94>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	fffffb7f 	.word	0xfffffb7f

08002188 <_svfiprintf_r>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	b0a1      	sub	sp, #132	; 0x84
 800218c:	9003      	str	r0, [sp, #12]
 800218e:	001d      	movs	r5, r3
 8002190:	898b      	ldrh	r3, [r1, #12]
 8002192:	000f      	movs	r7, r1
 8002194:	0016      	movs	r6, r2
 8002196:	061b      	lsls	r3, r3, #24
 8002198:	d511      	bpl.n	80021be <_svfiprintf_r+0x36>
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10e      	bne.n	80021be <_svfiprintf_r+0x36>
 80021a0:	2140      	movs	r1, #64	; 0x40
 80021a2:	f000 f913 	bl	80023cc <_malloc_r>
 80021a6:	6038      	str	r0, [r7, #0]
 80021a8:	6138      	str	r0, [r7, #16]
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d105      	bne.n	80021ba <_svfiprintf_r+0x32>
 80021ae:	230c      	movs	r3, #12
 80021b0:	9a03      	ldr	r2, [sp, #12]
 80021b2:	3801      	subs	r0, #1
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	b021      	add	sp, #132	; 0x84
 80021b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	2300      	movs	r3, #0
 80021c0:	ac08      	add	r4, sp, #32
 80021c2:	6163      	str	r3, [r4, #20]
 80021c4:	3320      	adds	r3, #32
 80021c6:	7663      	strb	r3, [r4, #25]
 80021c8:	3310      	adds	r3, #16
 80021ca:	76a3      	strb	r3, [r4, #26]
 80021cc:	9507      	str	r5, [sp, #28]
 80021ce:	0035      	movs	r5, r6
 80021d0:	782b      	ldrb	r3, [r5, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <_svfiprintf_r+0x52>
 80021d6:	2b25      	cmp	r3, #37	; 0x25
 80021d8:	d148      	bne.n	800226c <_svfiprintf_r+0xe4>
 80021da:	1bab      	subs	r3, r5, r6
 80021dc:	9305      	str	r3, [sp, #20]
 80021de:	42b5      	cmp	r5, r6
 80021e0:	d00b      	beq.n	80021fa <_svfiprintf_r+0x72>
 80021e2:	0032      	movs	r2, r6
 80021e4:	0039      	movs	r1, r7
 80021e6:	9803      	ldr	r0, [sp, #12]
 80021e8:	f7ff ff6c 	bl	80020c4 <__ssputs_r>
 80021ec:	3001      	adds	r0, #1
 80021ee:	d100      	bne.n	80021f2 <_svfiprintf_r+0x6a>
 80021f0:	e0af      	b.n	8002352 <_svfiprintf_r+0x1ca>
 80021f2:	6963      	ldr	r3, [r4, #20]
 80021f4:	9a05      	ldr	r2, [sp, #20]
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	6163      	str	r3, [r4, #20]
 80021fa:	782b      	ldrb	r3, [r5, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <_svfiprintf_r+0x7a>
 8002200:	e0a7      	b.n	8002352 <_svfiprintf_r+0x1ca>
 8002202:	2201      	movs	r2, #1
 8002204:	2300      	movs	r3, #0
 8002206:	4252      	negs	r2, r2
 8002208:	6062      	str	r2, [r4, #4]
 800220a:	a904      	add	r1, sp, #16
 800220c:	3254      	adds	r2, #84	; 0x54
 800220e:	1852      	adds	r2, r2, r1
 8002210:	1c6e      	adds	r6, r5, #1
 8002212:	6023      	str	r3, [r4, #0]
 8002214:	60e3      	str	r3, [r4, #12]
 8002216:	60a3      	str	r3, [r4, #8]
 8002218:	7013      	strb	r3, [r2, #0]
 800221a:	65a3      	str	r3, [r4, #88]	; 0x58
 800221c:	4b55      	ldr	r3, [pc, #340]	; (8002374 <_svfiprintf_r+0x1ec>)
 800221e:	2205      	movs	r2, #5
 8002220:	0018      	movs	r0, r3
 8002222:	7831      	ldrb	r1, [r6, #0]
 8002224:	9305      	str	r3, [sp, #20]
 8002226:	f000 fb37 	bl	8002898 <memchr>
 800222a:	1c75      	adds	r5, r6, #1
 800222c:	2800      	cmp	r0, #0
 800222e:	d11f      	bne.n	8002270 <_svfiprintf_r+0xe8>
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	06d3      	lsls	r3, r2, #27
 8002234:	d504      	bpl.n	8002240 <_svfiprintf_r+0xb8>
 8002236:	2353      	movs	r3, #83	; 0x53
 8002238:	a904      	add	r1, sp, #16
 800223a:	185b      	adds	r3, r3, r1
 800223c:	2120      	movs	r1, #32
 800223e:	7019      	strb	r1, [r3, #0]
 8002240:	0713      	lsls	r3, r2, #28
 8002242:	d504      	bpl.n	800224e <_svfiprintf_r+0xc6>
 8002244:	2353      	movs	r3, #83	; 0x53
 8002246:	a904      	add	r1, sp, #16
 8002248:	185b      	adds	r3, r3, r1
 800224a:	212b      	movs	r1, #43	; 0x2b
 800224c:	7019      	strb	r1, [r3, #0]
 800224e:	7833      	ldrb	r3, [r6, #0]
 8002250:	2b2a      	cmp	r3, #42	; 0x2a
 8002252:	d016      	beq.n	8002282 <_svfiprintf_r+0xfa>
 8002254:	0035      	movs	r5, r6
 8002256:	2100      	movs	r1, #0
 8002258:	200a      	movs	r0, #10
 800225a:	68e3      	ldr	r3, [r4, #12]
 800225c:	782a      	ldrb	r2, [r5, #0]
 800225e:	1c6e      	adds	r6, r5, #1
 8002260:	3a30      	subs	r2, #48	; 0x30
 8002262:	2a09      	cmp	r2, #9
 8002264:	d94e      	bls.n	8002304 <_svfiprintf_r+0x17c>
 8002266:	2900      	cmp	r1, #0
 8002268:	d111      	bne.n	800228e <_svfiprintf_r+0x106>
 800226a:	e017      	b.n	800229c <_svfiprintf_r+0x114>
 800226c:	3501      	adds	r5, #1
 800226e:	e7af      	b.n	80021d0 <_svfiprintf_r+0x48>
 8002270:	9b05      	ldr	r3, [sp, #20]
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	1ac0      	subs	r0, r0, r3
 8002276:	2301      	movs	r3, #1
 8002278:	4083      	lsls	r3, r0
 800227a:	4313      	orrs	r3, r2
 800227c:	002e      	movs	r6, r5
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	e7cc      	b.n	800221c <_svfiprintf_r+0x94>
 8002282:	9b07      	ldr	r3, [sp, #28]
 8002284:	1d19      	adds	r1, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	9107      	str	r1, [sp, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db01      	blt.n	8002292 <_svfiprintf_r+0x10a>
 800228e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002290:	e004      	b.n	800229c <_svfiprintf_r+0x114>
 8002292:	425b      	negs	r3, r3
 8002294:	60e3      	str	r3, [r4, #12]
 8002296:	2302      	movs	r3, #2
 8002298:	4313      	orrs	r3, r2
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	782b      	ldrb	r3, [r5, #0]
 800229e:	2b2e      	cmp	r3, #46	; 0x2e
 80022a0:	d10a      	bne.n	80022b8 <_svfiprintf_r+0x130>
 80022a2:	786b      	ldrb	r3, [r5, #1]
 80022a4:	2b2a      	cmp	r3, #42	; 0x2a
 80022a6:	d135      	bne.n	8002314 <_svfiprintf_r+0x18c>
 80022a8:	9b07      	ldr	r3, [sp, #28]
 80022aa:	3502      	adds	r5, #2
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	9207      	str	r2, [sp, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db2b      	blt.n	800230e <_svfiprintf_r+0x186>
 80022b6:	9309      	str	r3, [sp, #36]	; 0x24
 80022b8:	4e2f      	ldr	r6, [pc, #188]	; (8002378 <_svfiprintf_r+0x1f0>)
 80022ba:	2203      	movs	r2, #3
 80022bc:	0030      	movs	r0, r6
 80022be:	7829      	ldrb	r1, [r5, #0]
 80022c0:	f000 faea 	bl	8002898 <memchr>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d006      	beq.n	80022d6 <_svfiprintf_r+0x14e>
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	1b80      	subs	r0, r0, r6
 80022cc:	4083      	lsls	r3, r0
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	3501      	adds	r5, #1
 80022d2:	4313      	orrs	r3, r2
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	7829      	ldrb	r1, [r5, #0]
 80022d8:	2206      	movs	r2, #6
 80022da:	4828      	ldr	r0, [pc, #160]	; (800237c <_svfiprintf_r+0x1f4>)
 80022dc:	1c6e      	adds	r6, r5, #1
 80022de:	7621      	strb	r1, [r4, #24]
 80022e0:	f000 fada 	bl	8002898 <memchr>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d03c      	beq.n	8002362 <_svfiprintf_r+0x1da>
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <_svfiprintf_r+0x1f8>)
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d125      	bne.n	800233a <_svfiprintf_r+0x1b2>
 80022ee:	2207      	movs	r2, #7
 80022f0:	9b07      	ldr	r3, [sp, #28]
 80022f2:	3307      	adds	r3, #7
 80022f4:	4393      	bics	r3, r2
 80022f6:	3308      	adds	r3, #8
 80022f8:	9307      	str	r3, [sp, #28]
 80022fa:	6963      	ldr	r3, [r4, #20]
 80022fc:	9a04      	ldr	r2, [sp, #16]
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	6163      	str	r3, [r4, #20]
 8002302:	e764      	b.n	80021ce <_svfiprintf_r+0x46>
 8002304:	4343      	muls	r3, r0
 8002306:	0035      	movs	r5, r6
 8002308:	2101      	movs	r1, #1
 800230a:	189b      	adds	r3, r3, r2
 800230c:	e7a6      	b.n	800225c <_svfiprintf_r+0xd4>
 800230e:	2301      	movs	r3, #1
 8002310:	425b      	negs	r3, r3
 8002312:	e7d0      	b.n	80022b6 <_svfiprintf_r+0x12e>
 8002314:	2300      	movs	r3, #0
 8002316:	200a      	movs	r0, #10
 8002318:	001a      	movs	r2, r3
 800231a:	3501      	adds	r5, #1
 800231c:	6063      	str	r3, [r4, #4]
 800231e:	7829      	ldrb	r1, [r5, #0]
 8002320:	1c6e      	adds	r6, r5, #1
 8002322:	3930      	subs	r1, #48	; 0x30
 8002324:	2909      	cmp	r1, #9
 8002326:	d903      	bls.n	8002330 <_svfiprintf_r+0x1a8>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0c5      	beq.n	80022b8 <_svfiprintf_r+0x130>
 800232c:	9209      	str	r2, [sp, #36]	; 0x24
 800232e:	e7c3      	b.n	80022b8 <_svfiprintf_r+0x130>
 8002330:	4342      	muls	r2, r0
 8002332:	0035      	movs	r5, r6
 8002334:	2301      	movs	r3, #1
 8002336:	1852      	adds	r2, r2, r1
 8002338:	e7f1      	b.n	800231e <_svfiprintf_r+0x196>
 800233a:	aa07      	add	r2, sp, #28
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	0021      	movs	r1, r4
 8002340:	003a      	movs	r2, r7
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_svfiprintf_r+0x1fc>)
 8002344:	9803      	ldr	r0, [sp, #12]
 8002346:	e000      	b.n	800234a <_svfiprintf_r+0x1c2>
 8002348:	bf00      	nop
 800234a:	9004      	str	r0, [sp, #16]
 800234c:	9b04      	ldr	r3, [sp, #16]
 800234e:	3301      	adds	r3, #1
 8002350:	d1d3      	bne.n	80022fa <_svfiprintf_r+0x172>
 8002352:	89bb      	ldrh	r3, [r7, #12]
 8002354:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002356:	065b      	lsls	r3, r3, #25
 8002358:	d400      	bmi.n	800235c <_svfiprintf_r+0x1d4>
 800235a:	e72c      	b.n	80021b6 <_svfiprintf_r+0x2e>
 800235c:	2001      	movs	r0, #1
 800235e:	4240      	negs	r0, r0
 8002360:	e729      	b.n	80021b6 <_svfiprintf_r+0x2e>
 8002362:	aa07      	add	r2, sp, #28
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	0021      	movs	r1, r4
 8002368:	003a      	movs	r2, r7
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <_svfiprintf_r+0x1fc>)
 800236c:	9803      	ldr	r0, [sp, #12]
 800236e:	f000 f91f 	bl	80025b0 <_printf_i>
 8002372:	e7ea      	b.n	800234a <_svfiprintf_r+0x1c2>
 8002374:	080088b4 	.word	0x080088b4
 8002378:	080088ba 	.word	0x080088ba
 800237c:	080088be 	.word	0x080088be
 8002380:	00000000 	.word	0x00000000
 8002384:	080020c5 	.word	0x080020c5

08002388 <sbrk_aligned>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	4e0f      	ldr	r6, [pc, #60]	; (80023c8 <sbrk_aligned+0x40>)
 800238c:	000d      	movs	r5, r1
 800238e:	6831      	ldr	r1, [r6, #0]
 8002390:	0004      	movs	r4, r0
 8002392:	2900      	cmp	r1, #0
 8002394:	d102      	bne.n	800239c <sbrk_aligned+0x14>
 8002396:	f000 fa6d 	bl	8002874 <_sbrk_r>
 800239a:	6030      	str	r0, [r6, #0]
 800239c:	0029      	movs	r1, r5
 800239e:	0020      	movs	r0, r4
 80023a0:	f000 fa68 	bl	8002874 <_sbrk_r>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d00a      	beq.n	80023be <sbrk_aligned+0x36>
 80023a8:	2303      	movs	r3, #3
 80023aa:	1cc5      	adds	r5, r0, #3
 80023ac:	439d      	bics	r5, r3
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d007      	beq.n	80023c2 <sbrk_aligned+0x3a>
 80023b2:	1a29      	subs	r1, r5, r0
 80023b4:	0020      	movs	r0, r4
 80023b6:	f000 fa5d 	bl	8002874 <_sbrk_r>
 80023ba:	3001      	adds	r0, #1
 80023bc:	d101      	bne.n	80023c2 <sbrk_aligned+0x3a>
 80023be:	2501      	movs	r5, #1
 80023c0:	426d      	negs	r5, r5
 80023c2:	0028      	movs	r0, r5
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	20000c40 	.word	0x20000c40

080023cc <_malloc_r>:
 80023cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ce:	2203      	movs	r2, #3
 80023d0:	1ccb      	adds	r3, r1, #3
 80023d2:	4393      	bics	r3, r2
 80023d4:	3308      	adds	r3, #8
 80023d6:	0006      	movs	r6, r0
 80023d8:	001f      	movs	r7, r3
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d238      	bcs.n	8002450 <_malloc_r+0x84>
 80023de:	270c      	movs	r7, #12
 80023e0:	42b9      	cmp	r1, r7
 80023e2:	d837      	bhi.n	8002454 <_malloc_r+0x88>
 80023e4:	0030      	movs	r0, r6
 80023e6:	f000 f9f3 	bl	80027d0 <__malloc_lock>
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <_malloc_r+0x100>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	001c      	movs	r4, r3
 80023f2:	2c00      	cmp	r4, #0
 80023f4:	d133      	bne.n	800245e <_malloc_r+0x92>
 80023f6:	0039      	movs	r1, r7
 80023f8:	0030      	movs	r0, r6
 80023fa:	f7ff ffc5 	bl	8002388 <sbrk_aligned>
 80023fe:	0004      	movs	r4, r0
 8002400:	1c43      	adds	r3, r0, #1
 8002402:	d15e      	bne.n	80024c2 <_malloc_r+0xf6>
 8002404:	9b00      	ldr	r3, [sp, #0]
 8002406:	681c      	ldr	r4, [r3, #0]
 8002408:	0025      	movs	r5, r4
 800240a:	2d00      	cmp	r5, #0
 800240c:	d14e      	bne.n	80024ac <_malloc_r+0xe0>
 800240e:	2c00      	cmp	r4, #0
 8002410:	d051      	beq.n	80024b6 <_malloc_r+0xea>
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	0029      	movs	r1, r5
 8002416:	18e3      	adds	r3, r4, r3
 8002418:	0030      	movs	r0, r6
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	f000 fa2a 	bl	8002874 <_sbrk_r>
 8002420:	9b01      	ldr	r3, [sp, #4]
 8002422:	4283      	cmp	r3, r0
 8002424:	d147      	bne.n	80024b6 <_malloc_r+0xea>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	0030      	movs	r0, r6
 800242a:	1aff      	subs	r7, r7, r3
 800242c:	0039      	movs	r1, r7
 800242e:	f7ff ffab 	bl	8002388 <sbrk_aligned>
 8002432:	3001      	adds	r0, #1
 8002434:	d03f      	beq.n	80024b6 <_malloc_r+0xea>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	19db      	adds	r3, r3, r7
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d040      	beq.n	80024c6 <_malloc_r+0xfa>
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	42a2      	cmp	r2, r4
 8002448:	d133      	bne.n	80024b2 <_malloc_r+0xe6>
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	e014      	b.n	800247a <_malloc_r+0xae>
 8002450:	2b00      	cmp	r3, #0
 8002452:	dac5      	bge.n	80023e0 <_malloc_r+0x14>
 8002454:	230c      	movs	r3, #12
 8002456:	2500      	movs	r5, #0
 8002458:	6033      	str	r3, [r6, #0]
 800245a:	0028      	movs	r0, r5
 800245c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800245e:	6821      	ldr	r1, [r4, #0]
 8002460:	1bc9      	subs	r1, r1, r7
 8002462:	d420      	bmi.n	80024a6 <_malloc_r+0xda>
 8002464:	290b      	cmp	r1, #11
 8002466:	d918      	bls.n	800249a <_malloc_r+0xce>
 8002468:	19e2      	adds	r2, r4, r7
 800246a:	6027      	str	r7, [r4, #0]
 800246c:	42a3      	cmp	r3, r4
 800246e:	d112      	bne.n	8002496 <_malloc_r+0xca>
 8002470:	9b00      	ldr	r3, [sp, #0]
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	6863      	ldr	r3, [r4, #4]
 8002476:	6011      	str	r1, [r2, #0]
 8002478:	6053      	str	r3, [r2, #4]
 800247a:	0030      	movs	r0, r6
 800247c:	0025      	movs	r5, r4
 800247e:	f000 f9af 	bl	80027e0 <__malloc_unlock>
 8002482:	2207      	movs	r2, #7
 8002484:	350b      	adds	r5, #11
 8002486:	1d23      	adds	r3, r4, #4
 8002488:	4395      	bics	r5, r2
 800248a:	1aea      	subs	r2, r5, r3
 800248c:	429d      	cmp	r5, r3
 800248e:	d0e4      	beq.n	800245a <_malloc_r+0x8e>
 8002490:	1b5b      	subs	r3, r3, r5
 8002492:	50a3      	str	r3, [r4, r2]
 8002494:	e7e1      	b.n	800245a <_malloc_r+0x8e>
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	e7ec      	b.n	8002474 <_malloc_r+0xa8>
 800249a:	6862      	ldr	r2, [r4, #4]
 800249c:	42a3      	cmp	r3, r4
 800249e:	d1d5      	bne.n	800244c <_malloc_r+0x80>
 80024a0:	9b00      	ldr	r3, [sp, #0]
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e7e9      	b.n	800247a <_malloc_r+0xae>
 80024a6:	0023      	movs	r3, r4
 80024a8:	6864      	ldr	r4, [r4, #4]
 80024aa:	e7a2      	b.n	80023f2 <_malloc_r+0x26>
 80024ac:	002c      	movs	r4, r5
 80024ae:	686d      	ldr	r5, [r5, #4]
 80024b0:	e7ab      	b.n	800240a <_malloc_r+0x3e>
 80024b2:	0013      	movs	r3, r2
 80024b4:	e7c4      	b.n	8002440 <_malloc_r+0x74>
 80024b6:	230c      	movs	r3, #12
 80024b8:	0030      	movs	r0, r6
 80024ba:	6033      	str	r3, [r6, #0]
 80024bc:	f000 f990 	bl	80027e0 <__malloc_unlock>
 80024c0:	e7cb      	b.n	800245a <_malloc_r+0x8e>
 80024c2:	6027      	str	r7, [r4, #0]
 80024c4:	e7d9      	b.n	800247a <_malloc_r+0xae>
 80024c6:	605b      	str	r3, [r3, #4]
 80024c8:	deff      	udf	#255	; 0xff
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	20000c3c 	.word	0x20000c3c

080024d0 <_printf_common>:
 80024d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024d2:	0016      	movs	r6, r2
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	688a      	ldr	r2, [r1, #8]
 80024d8:	690b      	ldr	r3, [r1, #16]
 80024da:	000c      	movs	r4, r1
 80024dc:	9000      	str	r0, [sp, #0]
 80024de:	4293      	cmp	r3, r2
 80024e0:	da00      	bge.n	80024e4 <_printf_common+0x14>
 80024e2:	0013      	movs	r3, r2
 80024e4:	0022      	movs	r2, r4
 80024e6:	6033      	str	r3, [r6, #0]
 80024e8:	3243      	adds	r2, #67	; 0x43
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d001      	beq.n	80024f4 <_printf_common+0x24>
 80024f0:	3301      	adds	r3, #1
 80024f2:	6033      	str	r3, [r6, #0]
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	d502      	bpl.n	8002500 <_printf_common+0x30>
 80024fa:	6833      	ldr	r3, [r6, #0]
 80024fc:	3302      	adds	r3, #2
 80024fe:	6033      	str	r3, [r6, #0]
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	2306      	movs	r3, #6
 8002504:	0015      	movs	r5, r2
 8002506:	401d      	ands	r5, r3
 8002508:	421a      	tst	r2, r3
 800250a:	d027      	beq.n	800255c <_printf_common+0x8c>
 800250c:	0023      	movs	r3, r4
 800250e:	3343      	adds	r3, #67	; 0x43
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	4193      	sbcs	r3, r2
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	0692      	lsls	r2, r2, #26
 800251a:	d430      	bmi.n	800257e <_printf_common+0xae>
 800251c:	0022      	movs	r2, r4
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	9800      	ldr	r0, [sp, #0]
 8002522:	9d08      	ldr	r5, [sp, #32]
 8002524:	3243      	adds	r2, #67	; 0x43
 8002526:	47a8      	blx	r5
 8002528:	3001      	adds	r0, #1
 800252a:	d025      	beq.n	8002578 <_printf_common+0xa8>
 800252c:	2206      	movs	r2, #6
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	2500      	movs	r5, #0
 8002532:	4013      	ands	r3, r2
 8002534:	2b04      	cmp	r3, #4
 8002536:	d105      	bne.n	8002544 <_printf_common+0x74>
 8002538:	6833      	ldr	r3, [r6, #0]
 800253a:	68e5      	ldr	r5, [r4, #12]
 800253c:	1aed      	subs	r5, r5, r3
 800253e:	43eb      	mvns	r3, r5
 8002540:	17db      	asrs	r3, r3, #31
 8002542:	401d      	ands	r5, r3
 8002544:	68a3      	ldr	r3, [r4, #8]
 8002546:	6922      	ldr	r2, [r4, #16]
 8002548:	4293      	cmp	r3, r2
 800254a:	dd01      	ble.n	8002550 <_printf_common+0x80>
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	18ed      	adds	r5, r5, r3
 8002550:	2600      	movs	r6, #0
 8002552:	42b5      	cmp	r5, r6
 8002554:	d120      	bne.n	8002598 <_printf_common+0xc8>
 8002556:	2000      	movs	r0, #0
 8002558:	e010      	b.n	800257c <_printf_common+0xac>
 800255a:	3501      	adds	r5, #1
 800255c:	68e3      	ldr	r3, [r4, #12]
 800255e:	6832      	ldr	r2, [r6, #0]
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	42ab      	cmp	r3, r5
 8002564:	ddd2      	ble.n	800250c <_printf_common+0x3c>
 8002566:	0022      	movs	r2, r4
 8002568:	2301      	movs	r3, #1
 800256a:	9901      	ldr	r1, [sp, #4]
 800256c:	9800      	ldr	r0, [sp, #0]
 800256e:	9f08      	ldr	r7, [sp, #32]
 8002570:	3219      	adds	r2, #25
 8002572:	47b8      	blx	r7
 8002574:	3001      	adds	r0, #1
 8002576:	d1f0      	bne.n	800255a <_printf_common+0x8a>
 8002578:	2001      	movs	r0, #1
 800257a:	4240      	negs	r0, r0
 800257c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800257e:	2030      	movs	r0, #48	; 0x30
 8002580:	18e1      	adds	r1, r4, r3
 8002582:	3143      	adds	r1, #67	; 0x43
 8002584:	7008      	strb	r0, [r1, #0]
 8002586:	0021      	movs	r1, r4
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	3145      	adds	r1, #69	; 0x45
 800258c:	7809      	ldrb	r1, [r1, #0]
 800258e:	18a2      	adds	r2, r4, r2
 8002590:	3243      	adds	r2, #67	; 0x43
 8002592:	3302      	adds	r3, #2
 8002594:	7011      	strb	r1, [r2, #0]
 8002596:	e7c1      	b.n	800251c <_printf_common+0x4c>
 8002598:	0022      	movs	r2, r4
 800259a:	2301      	movs	r3, #1
 800259c:	9901      	ldr	r1, [sp, #4]
 800259e:	9800      	ldr	r0, [sp, #0]
 80025a0:	9f08      	ldr	r7, [sp, #32]
 80025a2:	321a      	adds	r2, #26
 80025a4:	47b8      	blx	r7
 80025a6:	3001      	adds	r0, #1
 80025a8:	d0e6      	beq.n	8002578 <_printf_common+0xa8>
 80025aa:	3601      	adds	r6, #1
 80025ac:	e7d1      	b.n	8002552 <_printf_common+0x82>
	...

080025b0 <_printf_i>:
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	b08b      	sub	sp, #44	; 0x2c
 80025b4:	9206      	str	r2, [sp, #24]
 80025b6:	000a      	movs	r2, r1
 80025b8:	3243      	adds	r2, #67	; 0x43
 80025ba:	9307      	str	r3, [sp, #28]
 80025bc:	9005      	str	r0, [sp, #20]
 80025be:	9204      	str	r2, [sp, #16]
 80025c0:	7e0a      	ldrb	r2, [r1, #24]
 80025c2:	000c      	movs	r4, r1
 80025c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025c6:	2a78      	cmp	r2, #120	; 0x78
 80025c8:	d809      	bhi.n	80025de <_printf_i+0x2e>
 80025ca:	2a62      	cmp	r2, #98	; 0x62
 80025cc:	d80b      	bhi.n	80025e6 <_printf_i+0x36>
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d100      	bne.n	80025d4 <_printf_i+0x24>
 80025d2:	e0be      	b.n	8002752 <_printf_i+0x1a2>
 80025d4:	497c      	ldr	r1, [pc, #496]	; (80027c8 <_printf_i+0x218>)
 80025d6:	9103      	str	r1, [sp, #12]
 80025d8:	2a58      	cmp	r2, #88	; 0x58
 80025da:	d100      	bne.n	80025de <_printf_i+0x2e>
 80025dc:	e093      	b.n	8002706 <_printf_i+0x156>
 80025de:	0026      	movs	r6, r4
 80025e0:	3642      	adds	r6, #66	; 0x42
 80025e2:	7032      	strb	r2, [r6, #0]
 80025e4:	e022      	b.n	800262c <_printf_i+0x7c>
 80025e6:	0010      	movs	r0, r2
 80025e8:	3863      	subs	r0, #99	; 0x63
 80025ea:	2815      	cmp	r0, #21
 80025ec:	d8f7      	bhi.n	80025de <_printf_i+0x2e>
 80025ee:	f7fd fd89 	bl	8000104 <__gnu_thumb1_case_shi>
 80025f2:	0016      	.short	0x0016
 80025f4:	fff6001f 	.word	0xfff6001f
 80025f8:	fff6fff6 	.word	0xfff6fff6
 80025fc:	001ffff6 	.word	0x001ffff6
 8002600:	fff6fff6 	.word	0xfff6fff6
 8002604:	fff6fff6 	.word	0xfff6fff6
 8002608:	003600a3 	.word	0x003600a3
 800260c:	fff60083 	.word	0xfff60083
 8002610:	00b4fff6 	.word	0x00b4fff6
 8002614:	0036fff6 	.word	0x0036fff6
 8002618:	fff6fff6 	.word	0xfff6fff6
 800261c:	0087      	.short	0x0087
 800261e:	0026      	movs	r6, r4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	3642      	adds	r6, #66	; 0x42
 8002624:	1d11      	adds	r1, r2, #4
 8002626:	6019      	str	r1, [r3, #0]
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	7033      	strb	r3, [r6, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	e0a2      	b.n	8002776 <_printf_i+0x1c6>
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	1d02      	adds	r2, r0, #4
 8002636:	060d      	lsls	r5, r1, #24
 8002638:	d50b      	bpl.n	8002652 <_printf_i+0xa2>
 800263a:	6805      	ldr	r5, [r0, #0]
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	2d00      	cmp	r5, #0
 8002640:	da03      	bge.n	800264a <_printf_i+0x9a>
 8002642:	232d      	movs	r3, #45	; 0x2d
 8002644:	9a04      	ldr	r2, [sp, #16]
 8002646:	426d      	negs	r5, r5
 8002648:	7013      	strb	r3, [r2, #0]
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <_printf_i+0x218>)
 800264c:	270a      	movs	r7, #10
 800264e:	9303      	str	r3, [sp, #12]
 8002650:	e01b      	b.n	800268a <_printf_i+0xda>
 8002652:	6805      	ldr	r5, [r0, #0]
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	0649      	lsls	r1, r1, #25
 8002658:	d5f1      	bpl.n	800263e <_printf_i+0x8e>
 800265a:	b22d      	sxth	r5, r5
 800265c:	e7ef      	b.n	800263e <_printf_i+0x8e>
 800265e:	680d      	ldr	r5, [r1, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	1d08      	adds	r0, r1, #4
 8002664:	6018      	str	r0, [r3, #0]
 8002666:	062e      	lsls	r6, r5, #24
 8002668:	d501      	bpl.n	800266e <_printf_i+0xbe>
 800266a:	680d      	ldr	r5, [r1, #0]
 800266c:	e003      	b.n	8002676 <_printf_i+0xc6>
 800266e:	066d      	lsls	r5, r5, #25
 8002670:	d5fb      	bpl.n	800266a <_printf_i+0xba>
 8002672:	680d      	ldr	r5, [r1, #0]
 8002674:	b2ad      	uxth	r5, r5
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <_printf_i+0x218>)
 8002678:	2708      	movs	r7, #8
 800267a:	9303      	str	r3, [sp, #12]
 800267c:	2a6f      	cmp	r2, #111	; 0x6f
 800267e:	d000      	beq.n	8002682 <_printf_i+0xd2>
 8002680:	3702      	adds	r7, #2
 8002682:	0023      	movs	r3, r4
 8002684:	2200      	movs	r2, #0
 8002686:	3343      	adds	r3, #67	; 0x43
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	60a3      	str	r3, [r4, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db03      	blt.n	800269a <_printf_i+0xea>
 8002692:	2104      	movs	r1, #4
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	438a      	bics	r2, r1
 8002698:	6022      	str	r2, [r4, #0]
 800269a:	2d00      	cmp	r5, #0
 800269c:	d102      	bne.n	80026a4 <_printf_i+0xf4>
 800269e:	9e04      	ldr	r6, [sp, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <_printf_i+0x10e>
 80026a4:	9e04      	ldr	r6, [sp, #16]
 80026a6:	0028      	movs	r0, r5
 80026a8:	0039      	movs	r1, r7
 80026aa:	f7fd fdbb 	bl	8000224 <__aeabi_uidivmod>
 80026ae:	9b03      	ldr	r3, [sp, #12]
 80026b0:	3e01      	subs	r6, #1
 80026b2:	5c5b      	ldrb	r3, [r3, r1]
 80026b4:	7033      	strb	r3, [r6, #0]
 80026b6:	002b      	movs	r3, r5
 80026b8:	0005      	movs	r5, r0
 80026ba:	429f      	cmp	r7, r3
 80026bc:	d9f3      	bls.n	80026a6 <_printf_i+0xf6>
 80026be:	2f08      	cmp	r7, #8
 80026c0:	d109      	bne.n	80026d6 <_printf_i+0x126>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	07db      	lsls	r3, r3, #31
 80026c6:	d506      	bpl.n	80026d6 <_printf_i+0x126>
 80026c8:	6862      	ldr	r2, [r4, #4]
 80026ca:	6923      	ldr	r3, [r4, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dc02      	bgt.n	80026d6 <_printf_i+0x126>
 80026d0:	2330      	movs	r3, #48	; 0x30
 80026d2:	3e01      	subs	r6, #1
 80026d4:	7033      	strb	r3, [r6, #0]
 80026d6:	9b04      	ldr	r3, [sp, #16]
 80026d8:	1b9b      	subs	r3, r3, r6
 80026da:	6123      	str	r3, [r4, #16]
 80026dc:	9b07      	ldr	r3, [sp, #28]
 80026de:	0021      	movs	r1, r4
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	9805      	ldr	r0, [sp, #20]
 80026e4:	9b06      	ldr	r3, [sp, #24]
 80026e6:	aa09      	add	r2, sp, #36	; 0x24
 80026e8:	f7ff fef2 	bl	80024d0 <_printf_common>
 80026ec:	3001      	adds	r0, #1
 80026ee:	d147      	bne.n	8002780 <_printf_i+0x1d0>
 80026f0:	2001      	movs	r0, #1
 80026f2:	4240      	negs	r0, r0
 80026f4:	b00b      	add	sp, #44	; 0x2c
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f8:	2220      	movs	r2, #32
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	6022      	str	r2, [r4, #0]
 8002700:	2278      	movs	r2, #120	; 0x78
 8002702:	4932      	ldr	r1, [pc, #200]	; (80027cc <_printf_i+0x21c>)
 8002704:	9103      	str	r1, [sp, #12]
 8002706:	0021      	movs	r1, r4
 8002708:	3145      	adds	r1, #69	; 0x45
 800270a:	700a      	strb	r2, [r1, #0]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	c920      	ldmia	r1!, {r5}
 8002712:	0610      	lsls	r0, r2, #24
 8002714:	d402      	bmi.n	800271c <_printf_i+0x16c>
 8002716:	0650      	lsls	r0, r2, #25
 8002718:	d500      	bpl.n	800271c <_printf_i+0x16c>
 800271a:	b2ad      	uxth	r5, r5
 800271c:	6019      	str	r1, [r3, #0]
 800271e:	07d3      	lsls	r3, r2, #31
 8002720:	d502      	bpl.n	8002728 <_printf_i+0x178>
 8002722:	2320      	movs	r3, #32
 8002724:	4313      	orrs	r3, r2
 8002726:	6023      	str	r3, [r4, #0]
 8002728:	2710      	movs	r7, #16
 800272a:	2d00      	cmp	r5, #0
 800272c:	d1a9      	bne.n	8002682 <_printf_i+0xd2>
 800272e:	2220      	movs	r2, #32
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	4393      	bics	r3, r2
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	e7a4      	b.n	8002682 <_printf_i+0xd2>
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	680d      	ldr	r5, [r1, #0]
 800273c:	1d10      	adds	r0, r2, #4
 800273e:	6949      	ldr	r1, [r1, #20]
 8002740:	6018      	str	r0, [r3, #0]
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	062e      	lsls	r6, r5, #24
 8002746:	d501      	bpl.n	800274c <_printf_i+0x19c>
 8002748:	6019      	str	r1, [r3, #0]
 800274a:	e002      	b.n	8002752 <_printf_i+0x1a2>
 800274c:	066d      	lsls	r5, r5, #25
 800274e:	d5fb      	bpl.n	8002748 <_printf_i+0x198>
 8002750:	8019      	strh	r1, [r3, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	9e04      	ldr	r6, [sp, #16]
 8002756:	6123      	str	r3, [r4, #16]
 8002758:	e7c0      	b.n	80026dc <_printf_i+0x12c>
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	1d11      	adds	r1, r2, #4
 800275e:	6019      	str	r1, [r3, #0]
 8002760:	6816      	ldr	r6, [r2, #0]
 8002762:	2100      	movs	r1, #0
 8002764:	0030      	movs	r0, r6
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	f000 f896 	bl	8002898 <memchr>
 800276c:	2800      	cmp	r0, #0
 800276e:	d001      	beq.n	8002774 <_printf_i+0x1c4>
 8002770:	1b80      	subs	r0, r0, r6
 8002772:	6060      	str	r0, [r4, #4]
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	6123      	str	r3, [r4, #16]
 8002778:	2300      	movs	r3, #0
 800277a:	9a04      	ldr	r2, [sp, #16]
 800277c:	7013      	strb	r3, [r2, #0]
 800277e:	e7ad      	b.n	80026dc <_printf_i+0x12c>
 8002780:	0032      	movs	r2, r6
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	9906      	ldr	r1, [sp, #24]
 8002786:	9805      	ldr	r0, [sp, #20]
 8002788:	9d07      	ldr	r5, [sp, #28]
 800278a:	47a8      	blx	r5
 800278c:	3001      	adds	r0, #1
 800278e:	d0af      	beq.n	80026f0 <_printf_i+0x140>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	079b      	lsls	r3, r3, #30
 8002794:	d415      	bmi.n	80027c2 <_printf_i+0x212>
 8002796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002798:	68e0      	ldr	r0, [r4, #12]
 800279a:	4298      	cmp	r0, r3
 800279c:	daaa      	bge.n	80026f4 <_printf_i+0x144>
 800279e:	0018      	movs	r0, r3
 80027a0:	e7a8      	b.n	80026f4 <_printf_i+0x144>
 80027a2:	0022      	movs	r2, r4
 80027a4:	2301      	movs	r3, #1
 80027a6:	9906      	ldr	r1, [sp, #24]
 80027a8:	9805      	ldr	r0, [sp, #20]
 80027aa:	9e07      	ldr	r6, [sp, #28]
 80027ac:	3219      	adds	r2, #25
 80027ae:	47b0      	blx	r6
 80027b0:	3001      	adds	r0, #1
 80027b2:	d09d      	beq.n	80026f0 <_printf_i+0x140>
 80027b4:	3501      	adds	r5, #1
 80027b6:	68e3      	ldr	r3, [r4, #12]
 80027b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	42ab      	cmp	r3, r5
 80027be:	dcf0      	bgt.n	80027a2 <_printf_i+0x1f2>
 80027c0:	e7e9      	b.n	8002796 <_printf_i+0x1e6>
 80027c2:	2500      	movs	r5, #0
 80027c4:	e7f7      	b.n	80027b6 <_printf_i+0x206>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	080088c5 	.word	0x080088c5
 80027cc:	080088d6 	.word	0x080088d6

080027d0 <__malloc_lock>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	4802      	ldr	r0, [pc, #8]	; (80027dc <__malloc_lock+0xc>)
 80027d4:	f7ff fc6a 	bl	80020ac <__retarget_lock_acquire_recursive>
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000c38 	.word	0x20000c38

080027e0 <__malloc_unlock>:
 80027e0:	b510      	push	{r4, lr}
 80027e2:	4802      	ldr	r0, [pc, #8]	; (80027ec <__malloc_unlock+0xc>)
 80027e4:	f7ff fc63 	bl	80020ae <__retarget_lock_release_recursive>
 80027e8:	bd10      	pop	{r4, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000c38 	.word	0x20000c38

080027f0 <_realloc_r>:
 80027f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027f2:	0007      	movs	r7, r0
 80027f4:	000e      	movs	r6, r1
 80027f6:	0014      	movs	r4, r2
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d105      	bne.n	8002808 <_realloc_r+0x18>
 80027fc:	0011      	movs	r1, r2
 80027fe:	f7ff fde5 	bl	80023cc <_malloc_r>
 8002802:	0005      	movs	r5, r0
 8002804:	0028      	movs	r0, r5
 8002806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002808:	2a00      	cmp	r2, #0
 800280a:	d103      	bne.n	8002814 <_realloc_r+0x24>
 800280c:	f000 f850 	bl	80028b0 <_free_r>
 8002810:	0025      	movs	r5, r4
 8002812:	e7f7      	b.n	8002804 <_realloc_r+0x14>
 8002814:	f000 f896 	bl	8002944 <_malloc_usable_size_r>
 8002818:	9001      	str	r0, [sp, #4]
 800281a:	4284      	cmp	r4, r0
 800281c:	d803      	bhi.n	8002826 <_realloc_r+0x36>
 800281e:	0035      	movs	r5, r6
 8002820:	0843      	lsrs	r3, r0, #1
 8002822:	42a3      	cmp	r3, r4
 8002824:	d3ee      	bcc.n	8002804 <_realloc_r+0x14>
 8002826:	0021      	movs	r1, r4
 8002828:	0038      	movs	r0, r7
 800282a:	f7ff fdcf 	bl	80023cc <_malloc_r>
 800282e:	1e05      	subs	r5, r0, #0
 8002830:	d0e8      	beq.n	8002804 <_realloc_r+0x14>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	0022      	movs	r2, r4
 8002836:	429c      	cmp	r4, r3
 8002838:	d900      	bls.n	800283c <_realloc_r+0x4c>
 800283a:	001a      	movs	r2, r3
 800283c:	0031      	movs	r1, r6
 800283e:	0028      	movs	r0, r5
 8002840:	f7ff fc36 	bl	80020b0 <memcpy>
 8002844:	0031      	movs	r1, r6
 8002846:	0038      	movs	r0, r7
 8002848:	f000 f832 	bl	80028b0 <_free_r>
 800284c:	e7da      	b.n	8002804 <_realloc_r+0x14>

0800284e <memmove>:
 800284e:	b510      	push	{r4, lr}
 8002850:	4288      	cmp	r0, r1
 8002852:	d902      	bls.n	800285a <memmove+0xc>
 8002854:	188b      	adds	r3, r1, r2
 8002856:	4298      	cmp	r0, r3
 8002858:	d303      	bcc.n	8002862 <memmove+0x14>
 800285a:	2300      	movs	r3, #0
 800285c:	e007      	b.n	800286e <memmove+0x20>
 800285e:	5c8b      	ldrb	r3, [r1, r2]
 8002860:	5483      	strb	r3, [r0, r2]
 8002862:	3a01      	subs	r2, #1
 8002864:	d2fb      	bcs.n	800285e <memmove+0x10>
 8002866:	bd10      	pop	{r4, pc}
 8002868:	5ccc      	ldrb	r4, [r1, r3]
 800286a:	54c4      	strb	r4, [r0, r3]
 800286c:	3301      	adds	r3, #1
 800286e:	429a      	cmp	r2, r3
 8002870:	d1fa      	bne.n	8002868 <memmove+0x1a>
 8002872:	e7f8      	b.n	8002866 <memmove+0x18>

08002874 <_sbrk_r>:
 8002874:	2300      	movs	r3, #0
 8002876:	b570      	push	{r4, r5, r6, lr}
 8002878:	4d06      	ldr	r5, [pc, #24]	; (8002894 <_sbrk_r+0x20>)
 800287a:	0004      	movs	r4, r0
 800287c:	0008      	movs	r0, r1
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	f7ff fa18 	bl	8001cb4 <_sbrk>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	d103      	bne.n	8002890 <_sbrk_r+0x1c>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d000      	beq.n	8002890 <_sbrk_r+0x1c>
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	bd70      	pop	{r4, r5, r6, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	20000c44 	.word	0x20000c44

08002898 <memchr>:
 8002898:	b2c9      	uxtb	r1, r1
 800289a:	1882      	adds	r2, r0, r2
 800289c:	4290      	cmp	r0, r2
 800289e:	d101      	bne.n	80028a4 <memchr+0xc>
 80028a0:	2000      	movs	r0, #0
 80028a2:	4770      	bx	lr
 80028a4:	7803      	ldrb	r3, [r0, #0]
 80028a6:	428b      	cmp	r3, r1
 80028a8:	d0fb      	beq.n	80028a2 <memchr+0xa>
 80028aa:	3001      	adds	r0, #1
 80028ac:	e7f6      	b.n	800289c <memchr+0x4>
	...

080028b0 <_free_r>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	0005      	movs	r5, r0
 80028b4:	2900      	cmp	r1, #0
 80028b6:	d010      	beq.n	80028da <_free_r+0x2a>
 80028b8:	1f0c      	subs	r4, r1, #4
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	da00      	bge.n	80028c2 <_free_r+0x12>
 80028c0:	18e4      	adds	r4, r4, r3
 80028c2:	0028      	movs	r0, r5
 80028c4:	f7ff ff84 	bl	80027d0 <__malloc_lock>
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <_free_r+0x90>)
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <_free_r+0x2c>
 80028d0:	6063      	str	r3, [r4, #4]
 80028d2:	6014      	str	r4, [r2, #0]
 80028d4:	0028      	movs	r0, r5
 80028d6:	f7ff ff83 	bl	80027e0 <__malloc_unlock>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	42a3      	cmp	r3, r4
 80028de:	d908      	bls.n	80028f2 <_free_r+0x42>
 80028e0:	6820      	ldr	r0, [r4, #0]
 80028e2:	1821      	adds	r1, r4, r0
 80028e4:	428b      	cmp	r3, r1
 80028e6:	d1f3      	bne.n	80028d0 <_free_r+0x20>
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	1809      	adds	r1, r1, r0
 80028ee:	6021      	str	r1, [r4, #0]
 80028f0:	e7ee      	b.n	80028d0 <_free_r+0x20>
 80028f2:	001a      	movs	r2, r3
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <_free_r+0x4e>
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	d9f9      	bls.n	80028f2 <_free_r+0x42>
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	1850      	adds	r0, r2, r1
 8002902:	42a0      	cmp	r0, r4
 8002904:	d10b      	bne.n	800291e <_free_r+0x6e>
 8002906:	6820      	ldr	r0, [r4, #0]
 8002908:	1809      	adds	r1, r1, r0
 800290a:	1850      	adds	r0, r2, r1
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	4283      	cmp	r3, r0
 8002910:	d1e0      	bne.n	80028d4 <_free_r+0x24>
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	1841      	adds	r1, r0, r1
 8002918:	6011      	str	r1, [r2, #0]
 800291a:	6053      	str	r3, [r2, #4]
 800291c:	e7da      	b.n	80028d4 <_free_r+0x24>
 800291e:	42a0      	cmp	r0, r4
 8002920:	d902      	bls.n	8002928 <_free_r+0x78>
 8002922:	230c      	movs	r3, #12
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	e7d5      	b.n	80028d4 <_free_r+0x24>
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	1821      	adds	r1, r4, r0
 800292c:	428b      	cmp	r3, r1
 800292e:	d103      	bne.n	8002938 <_free_r+0x88>
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	1809      	adds	r1, r1, r0
 8002936:	6021      	str	r1, [r4, #0]
 8002938:	6063      	str	r3, [r4, #4]
 800293a:	6054      	str	r4, [r2, #4]
 800293c:	e7ca      	b.n	80028d4 <_free_r+0x24>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000c3c 	.word	0x20000c3c

08002944 <_malloc_usable_size_r>:
 8002944:	1f0b      	subs	r3, r1, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1f18      	subs	r0, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	da01      	bge.n	8002952 <_malloc_usable_size_r+0xe>
 800294e:	580b      	ldr	r3, [r1, r0]
 8002950:	18c0      	adds	r0, r0, r3
 8002952:	4770      	bx	lr

08002954 <_init>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr

08002960 <_fini>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr
