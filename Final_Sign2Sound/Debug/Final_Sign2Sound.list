
Final_Sign2Sound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003364  08003364  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003364  08003364  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003364  08003364  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076cc  20000014  08003380  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200076e0  08003380  000276e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a295  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001968  00000000  00000000  0002a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076a  00000000  00000000  0002c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adb2  00000000  00000000  0002cd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdfa  00000000  00000000  00047b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1fe2  00000000  00000000  0005391e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002190  00000000  00000000  000f5900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f7a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003168 	.word	0x08003168

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08003168 	.word	0x08003168

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <nano_wait>:
#define SPI SPI1

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	1c18      	adds	r0, r3, #0

08000238 <repeat>:
 8000238:	3853      	subs	r0, #83	; 0x53
 800023a:	dcfd      	bgt.n	8000238 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 feb8 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f818 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f910 	bl	8000474 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000254:	f000 f870 	bl	8000338 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000258:	f000 f8ac 	bl	80003b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800025c:	f000 f8da 	bl	8000414 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup OLED and Display Instructions
  setup_bb();
 8000260:	f000 fc0c 	bl	8000a7c <setup_bb>
  bb_init_oled();
 8000264:	f000 fce2 	bl	8000c2c <bb_init_oled>
  bb_display1("PRESS THE BUTTON TO START");
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <main+0x38>)
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fd00 	bl	8000c70 <bb_display1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Run the OLED Handler
	  OLED_Handler();
 8000270:	f000 fa28 	bl	80006c4 <OLED_Handler>
	  // Run the DAC Handler
	  DAC_Handler();
 8000274:	f000 f946 	bl	8000504 <DAC_Handler>
	  OLED_Handler();
 8000278:	e7fa      	b.n	8000270 <main+0x2c>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	08003180 	.word	0x08003180

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b099      	sub	sp, #100	; 0x64
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	242c      	movs	r4, #44	; 0x2c
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2334      	movs	r3, #52	; 0x34
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f002 ff3d 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	231c      	movs	r3, #28
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	0018      	movs	r0, r3
 800029c:	2310      	movs	r3, #16
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 ff35 	bl	8003110 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	231c      	movs	r3, #28
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 ff2e 	bl	8003110 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f937 	bl	8001544 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002da:	f000 fd2c 	bl	8000d36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	211c      	movs	r1, #28
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2100      	movs	r1, #0
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fca7 	bl	8001c50 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000306:	f000 fd16 	bl	8000d36 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 800030a:	003b      	movs	r3, r7
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <SystemClock_Config+0xb4>)
 800030e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000310:	003b      	movs	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031c:	003b      	movs	r3, r7
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fe02 	bl	8001f28 <HAL_RCCEx_PeriphCLKConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000328:	f000 fd05 	bl	8000d36 <Error_Handler>
  }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b019      	add	sp, #100	; 0x64
 8000332:	bd90      	pop	{r4, r7, pc}
 8000334:	00040002 	.word	0x00040002

08000338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_SPI1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <MX_SPI1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_SPI1_Init+0x74>)
 8000344:	2282      	movs	r2, #130	; 0x82
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_SPI1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_SPI1_Init+0x74>)
 8000352:	22f0      	movs	r2, #240	; 0xf0
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_SPI1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_SPI1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_SPI1_Init+0x74>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_SPI1_Init+0x74>)
 8000386:	2207      	movs	r2, #7
 8000388:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_SPI1_Init+0x74>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fec5 	bl	8002128 <HAL_SPI_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 fcc8 	bl	8000d36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000030 	.word	0x20000030
 80003b0:	40013000 	.word	0x40013000

080003b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <MX_USART2_UART_Init+0x5c>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003c0:	2296      	movs	r2, #150	; 0x96
 80003c2:	0192      	lsls	r2, r2, #6
 80003c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_USART2_UART_Init+0x58>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 fa23 	bl	8002844 <HAL_UART_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000402:	f000 fc98 	bl	8000d36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000094 	.word	0x20000094
 8000410:	40004400 	.word	0x40004400

08000414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART3_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART3_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000420:	22e1      	movs	r2, #225	; 0xe1
 8000422:	0252      	lsls	r2, r2, #9
 8000424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART3_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART3_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART3_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_USART3_UART_Init+0x58>)
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f9f3 	bl	8002844 <HAL_UART_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 fc68 	bl	8000d36 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000011c 	.word	0x2000011c
 8000470:	40004800 	.word	0x40004800

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fe43 	bl	8003110 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_GPIO_Init+0x8c>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_GPIO_Init+0x8c>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0289      	lsls	r1, r1, #10
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_GPIO_Init+0x8c>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	029b      	lsls	r3, r3, #10
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0309      	lsls	r1, r1, #12
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	031b      	lsls	r3, r3, #12
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2201      	movs	r2, #1
 80004c8:	2110      	movs	r1, #16
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f81c 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2210      	movs	r2, #16
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2203      	movs	r2, #3
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fe90 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b009      	add	sp, #36	; 0x24
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <DAC_Handler>:

/**
  * @brief  DAC Handler to receive audio data and send to DAC
  * @retval None
  */
void DAC_Handler(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	if ((USART3->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <DAC_Handler+0xd4>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	2220      	movs	r2, #32
 8000510:	4013      	ands	r3, r2
 8000512:	2b20      	cmp	r3, #32
 8000514:	d138      	bne.n	8000588 <DAC_Handler+0x84>
	{
		uint8_t rx_audio_byte = (uint8_t)(USART3->RDR);
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <DAC_Handler+0xd4>)
 8000518:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800051a:	b29a      	uxth	r2, r3
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	701a      	strb	r2, [r3, #0]

		// Save received MSB
		if (audio_byte_iter == 0) {
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <DAC_Handler+0xd8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10a      	bne.n	8000540 <DAC_Handler+0x3c>
			audio_sample = rx_audio_byte << 8;
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b29b      	uxth	r3, r3
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	b29a      	uxth	r2, r3
 8000534:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <DAC_Handler+0xdc>)
 8000536:	801a      	strh	r2, [r3, #0]
			audio_byte_iter = 1;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <DAC_Handler+0xd8>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	e023      	b.n	8000588 <DAC_Handler+0x84>
		}
		// Save received LSB
		else if (audio_buffer_index < BUFFER_SIZE) {
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <DAC_Handler+0xe0>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b29b      	uxth	r3, r3
 8000546:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <DAC_Handler+0xe4>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d81d      	bhi.n	8000588 <DAC_Handler+0x84>
			audio_sample |= rx_audio_byte;
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <DAC_Handler+0xdc>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <DAC_Handler+0xdc>)
 800055e:	801a      	strh	r2, [r3, #0]
			audio_byte_iter = 0;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <DAC_Handler+0xd8>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]

			// Store 16 bit element in buffer
			audio_buffer[audio_buffer_index] = audio_sample;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <DAC_Handler+0xe0>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	001a      	movs	r2, r3
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <DAC_Handler+0xdc>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	b299      	uxth	r1, r3
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <DAC_Handler+0xe8>)
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	52d1      	strh	r1, [r2, r3]
			audio_buffer_index += 1;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <DAC_Handler+0xe0>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <DAC_Handler+0xe0>)
 8000586:	801a      	strh	r2, [r3, #0]
		}
	}

	// Handle overrun
	if (USART3->ISR & USART_ISR_ORE) {
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <DAC_Handler+0xd4>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	2208      	movs	r2, #8
 800058e:	4013      	ands	r3, r2
 8000590:	d005      	beq.n	800059e <DAC_Handler+0x9a>
	    USART3->ICR |= USART_ICR_ORECF;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <DAC_Handler+0xd4>)
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <DAC_Handler+0xd4>)
 8000598:	2108      	movs	r1, #8
 800059a:	430a      	orrs	r2, r1
 800059c:	621a      	str	r2, [r3, #32]
	}
	// Framing error
	if (USART3->ISR & USART_ISR_FE) {
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <DAC_Handler+0xd4>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	2202      	movs	r2, #2
 80005a4:	4013      	ands	r3, r2
 80005a6:	d005      	beq.n	80005b4 <DAC_Handler+0xb0>
	    USART3->ICR |= USART_ICR_FECF;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <DAC_Handler+0xd4>)
 80005aa:	6a1a      	ldr	r2, [r3, #32]
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <DAC_Handler+0xd4>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	430a      	orrs	r2, r1
 80005b2:	621a      	str	r2, [r3, #32]
	}

	// Send audio buffer to DAC if full
	if (audio_buffer_index == BUFFER_SIZE) {
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <DAC_Handler+0xe0>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <DAC_Handler+0xec>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d107      	bne.n	80005d0 <DAC_Handler+0xcc>
		process_audio_data();
 80005c0:	f000 f840 	bl	8000644 <process_audio_data>

		// Display instructions on OLED after audio is done
		bb_clear_display();
 80005c4:	f000 fb9e 	bl	8000d04 <bb_clear_display>
		bb_display1("PRESS THE BUTTON TO START");
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <DAC_Handler+0xf0>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fb50 	bl	8000c70 <bb_display1>
	}
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004800 	.word	0x40004800
 80005dc:	200076d6 	.word	0x200076d6
 80005e0:	200076d8 	.word	0x200076d8
 80005e4:	200076d4 	.word	0x200076d4
 80005e8:	00003a97 	.word	0x00003a97
 80005ec:	200001a4 	.word	0x200001a4
 80005f0:	00003a98 	.word	0x00003a98
 80005f4:	08003180 	.word	0x08003180

080005f8 <spi_write>:

/**
  * @brief  Write 16 bit sample to DAC via SPI1
  * @retval None
  */
HAL_StatusTypeDef spi_write(uint16_t * data) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	// Reset CS pin
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ff7d 	bl	8001508 <HAL_GPIO_WritePin>

	// Transmit audio sample
	ret = HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 800060e:	250f      	movs	r5, #15
 8000610:	197c      	adds	r4, r7, r5
 8000612:	2301      	movs	r3, #1
 8000614:	425b      	negs	r3, r3
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <spi_write+0x48>)
 800061a:	2202      	movs	r2, #2
 800061c:	f001 fe3c 	bl	8002298 <HAL_SPI_Transmit>
 8000620:	0003      	movs	r3, r0
 8000622:	7023      	strb	r3, [r4, #0]

	// Set CS pin
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000624:	2390      	movs	r3, #144	; 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	0018      	movs	r0, r3
 800062e:	f000 ff6b 	bl	8001508 <HAL_GPIO_WritePin>

	return ret;
 8000632:	197b      	adds	r3, r7, r5
 8000634:	781b      	ldrb	r3, [r3, #0]
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b004      	add	sp, #16
 800063c:	bdb0      	pop	{r4, r5, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	20000030 	.word	0x20000030

08000644 <process_audio_data>:

/**
  * @brief  Send audio buffer to DAC and reset parameters
  * @retval None
  */
void process_audio_data(void) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
	// Iterate through audio buffer samples
	for (int i=0; i<BUFFER_SIZE; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e01d      	b.n	800068c <process_audio_data+0x48>
		// Store next sample
		uint16_t * sample = &audio_buffer[i];
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	005a      	lsls	r2, r3, #1
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <process_audio_data+0x6c>)
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	60bb      	str	r3, [r7, #8]

		// Reset sample in buffer
		audio_buffer[i] = 0;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <process_audio_data+0x6c>)
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	2100      	movs	r1, #0
 8000662:	52d1      	strh	r1, [r2, r3]

		// Send every other sample to DAC
		if (i % 2 == 0) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	d10c      	bne.n	8000686 <process_audio_data+0x42>
			HAL_StatusTypeDef spiHAL = spi_write(sample);
 800066c:	1dfc      	adds	r4, r7, #7
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff ffc1 	bl	80005f8 <spi_write>
 8000676:	0003      	movs	r3, r0
 8000678:	7023      	strb	r3, [r4, #0]

			// Error Handling
			if (spiHAL != HAL_OK) {
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <process_audio_data+0x42>
				Error_Handler();
 8000682:	f000 fb58 	bl	8000d36 <Error_Handler>
	for (int i=0; i<BUFFER_SIZE; i++) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <process_audio_data+0x70>)
 8000690:	4293      	cmp	r3, r2
 8000692:	dddd      	ble.n	8000650 <process_audio_data+0xc>
			}
		}
	}

	// Reset buffer parameters
	audio_buffer_index = 0;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <process_audio_data+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
	audio_byte_iter = 0;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <process_audio_data+0x78>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	audio_sample = 0;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <process_audio_data+0x7c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b005      	add	sp, #20
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	200001a4 	.word	0x200001a4
 80006b4:	00003a97 	.word	0x00003a97
 80006b8:	200076d4 	.word	0x200076d4
 80006bc:	200076d6 	.word	0x200076d6
 80006c0:	200076d8 	.word	0x200076d8

080006c4 <OLED_Handler>:

void OLED_Handler(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	// Receive transmitted letter
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 80006c8:	4bb8      	ldr	r3, [pc, #736]	; (80009ac <OLED_Handler+0x2e8>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	2220      	movs	r2, #32
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d000      	beq.n	80006d6 <OLED_Handler+0x12>
 80006d4:	e1b1      	b.n	8000a3a <OLED_Handler+0x376>
	{
		rx_letter = (uint8_t)(USART2->RDR);
 80006d6:	4bb5      	ldr	r3, [pc, #724]	; (80009ac <OLED_Handler+0x2e8>)
 80006d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4bb4      	ldr	r3, [pc, #720]	; (80009b0 <OLED_Handler+0x2ec>)
 80006e0:	701a      	strb	r2, [r3, #0]

		// Check for software reset
		if (rx_letter == reset_code) {
 80006e2:	4bb3      	ldr	r3, [pc, #716]	; (80009b0 <OLED_Handler+0x2ec>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4bb2      	ldr	r3, [pc, #712]	; (80009b4 <OLED_Handler+0x2f0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d102      	bne.n	80006f6 <OLED_Handler+0x32>
			software_reset();
 80006f0:	f000 fb1a 	bl	8000d28 <software_reset>
			return;
 80006f4:	e1b7      	b.n	8000a66 <OLED_Handler+0x3a2>
		}

		// Clear instruction message
		bb_clear_display();
 80006f6:	f000 fb05 	bl	8000d04 <bb_clear_display>

		// Send letter to OLED
		if ((rx_letter == 'A') || rx_letter == 'a') {
 80006fa:	4bad      	ldr	r3, [pc, #692]	; (80009b0 <OLED_Handler+0x2ec>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b41      	cmp	r3, #65	; 0x41
 8000702:	d004      	beq.n	800070e <OLED_Handler+0x4a>
 8000704:	4baa      	ldr	r3, [pc, #680]	; (80009b0 <OLED_Handler+0x2ec>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b61      	cmp	r3, #97	; 0x61
 800070c:	d104      	bne.n	8000718 <OLED_Handler+0x54>
			bb_display1("TRANSLATION: A");
 800070e:	4baa      	ldr	r3, [pc, #680]	; (80009b8 <OLED_Handler+0x2f4>)
 8000710:	0018      	movs	r0, r3
 8000712:	f000 faad 	bl	8000c70 <bb_display1>
 8000716:	e190      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'B') || rx_letter == 'b') {
 8000718:	4ba5      	ldr	r3, [pc, #660]	; (80009b0 <OLED_Handler+0x2ec>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b42      	cmp	r3, #66	; 0x42
 8000720:	d004      	beq.n	800072c <OLED_Handler+0x68>
 8000722:	4ba3      	ldr	r3, [pc, #652]	; (80009b0 <OLED_Handler+0x2ec>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b62      	cmp	r3, #98	; 0x62
 800072a:	d104      	bne.n	8000736 <OLED_Handler+0x72>
			bb_display1("TRANSLATION: B");
 800072c:	4ba3      	ldr	r3, [pc, #652]	; (80009bc <OLED_Handler+0x2f8>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fa9e 	bl	8000c70 <bb_display1>
 8000734:	e181      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'C') || rx_letter == 'c') {
 8000736:	4b9e      	ldr	r3, [pc, #632]	; (80009b0 <OLED_Handler+0x2ec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b43      	cmp	r3, #67	; 0x43
 800073e:	d004      	beq.n	800074a <OLED_Handler+0x86>
 8000740:	4b9b      	ldr	r3, [pc, #620]	; (80009b0 <OLED_Handler+0x2ec>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b63      	cmp	r3, #99	; 0x63
 8000748:	d104      	bne.n	8000754 <OLED_Handler+0x90>
			bb_display1("TRANSLATION: C");
 800074a:	4b9d      	ldr	r3, [pc, #628]	; (80009c0 <OLED_Handler+0x2fc>)
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fa8f 	bl	8000c70 <bb_display1>
 8000752:	e172      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'D') || rx_letter == 'd') {
 8000754:	4b96      	ldr	r3, [pc, #600]	; (80009b0 <OLED_Handler+0x2ec>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b44      	cmp	r3, #68	; 0x44
 800075c:	d004      	beq.n	8000768 <OLED_Handler+0xa4>
 800075e:	4b94      	ldr	r3, [pc, #592]	; (80009b0 <OLED_Handler+0x2ec>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b64      	cmp	r3, #100	; 0x64
 8000766:	d104      	bne.n	8000772 <OLED_Handler+0xae>
			bb_display1("TRANSLATION: D");
 8000768:	4b96      	ldr	r3, [pc, #600]	; (80009c4 <OLED_Handler+0x300>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fa80 	bl	8000c70 <bb_display1>
 8000770:	e163      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'E') || rx_letter == 'e') {
 8000772:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <OLED_Handler+0x2ec>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b45      	cmp	r3, #69	; 0x45
 800077a:	d004      	beq.n	8000786 <OLED_Handler+0xc2>
 800077c:	4b8c      	ldr	r3, [pc, #560]	; (80009b0 <OLED_Handler+0x2ec>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b65      	cmp	r3, #101	; 0x65
 8000784:	d104      	bne.n	8000790 <OLED_Handler+0xcc>
			bb_display1("TRANSLATION: E");
 8000786:	4b90      	ldr	r3, [pc, #576]	; (80009c8 <OLED_Handler+0x304>)
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fa71 	bl	8000c70 <bb_display1>
 800078e:	e154      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'F') || rx_letter == 'f') {
 8000790:	4b87      	ldr	r3, [pc, #540]	; (80009b0 <OLED_Handler+0x2ec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b46      	cmp	r3, #70	; 0x46
 8000798:	d004      	beq.n	80007a4 <OLED_Handler+0xe0>
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <OLED_Handler+0x2ec>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b66      	cmp	r3, #102	; 0x66
 80007a2:	d104      	bne.n	80007ae <OLED_Handler+0xea>
			bb_display1("TRANSLATION: F");
 80007a4:	4b89      	ldr	r3, [pc, #548]	; (80009cc <OLED_Handler+0x308>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fa62 	bl	8000c70 <bb_display1>
 80007ac:	e145      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'G') || rx_letter == 'g') {
 80007ae:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <OLED_Handler+0x2ec>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b47      	cmp	r3, #71	; 0x47
 80007b6:	d004      	beq.n	80007c2 <OLED_Handler+0xfe>
 80007b8:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <OLED_Handler+0x2ec>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b67      	cmp	r3, #103	; 0x67
 80007c0:	d104      	bne.n	80007cc <OLED_Handler+0x108>
			bb_display1("TRANSLATION: G");
 80007c2:	4b83      	ldr	r3, [pc, #524]	; (80009d0 <OLED_Handler+0x30c>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fa53 	bl	8000c70 <bb_display1>
 80007ca:	e136      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'H') || rx_letter == 'h') {
 80007cc:	4b78      	ldr	r3, [pc, #480]	; (80009b0 <OLED_Handler+0x2ec>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b48      	cmp	r3, #72	; 0x48
 80007d4:	d004      	beq.n	80007e0 <OLED_Handler+0x11c>
 80007d6:	4b76      	ldr	r3, [pc, #472]	; (80009b0 <OLED_Handler+0x2ec>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b68      	cmp	r3, #104	; 0x68
 80007de:	d104      	bne.n	80007ea <OLED_Handler+0x126>
			bb_display1("TRANSLATION: H");
 80007e0:	4b7c      	ldr	r3, [pc, #496]	; (80009d4 <OLED_Handler+0x310>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fa44 	bl	8000c70 <bb_display1>
 80007e8:	e127      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'I') || rx_letter == 'i') {
 80007ea:	4b71      	ldr	r3, [pc, #452]	; (80009b0 <OLED_Handler+0x2ec>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b49      	cmp	r3, #73	; 0x49
 80007f2:	d004      	beq.n	80007fe <OLED_Handler+0x13a>
 80007f4:	4b6e      	ldr	r3, [pc, #440]	; (80009b0 <OLED_Handler+0x2ec>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b69      	cmp	r3, #105	; 0x69
 80007fc:	d104      	bne.n	8000808 <OLED_Handler+0x144>
			bb_display1("TRANSLATION: I");
 80007fe:	4b76      	ldr	r3, [pc, #472]	; (80009d8 <OLED_Handler+0x314>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fa35 	bl	8000c70 <bb_display1>
 8000806:	e118      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'K') || rx_letter == 'k') {
 8000808:	4b69      	ldr	r3, [pc, #420]	; (80009b0 <OLED_Handler+0x2ec>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b4b      	cmp	r3, #75	; 0x4b
 8000810:	d004      	beq.n	800081c <OLED_Handler+0x158>
 8000812:	4b67      	ldr	r3, [pc, #412]	; (80009b0 <OLED_Handler+0x2ec>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b6b      	cmp	r3, #107	; 0x6b
 800081a:	d104      	bne.n	8000826 <OLED_Handler+0x162>
			bb_display1("TRANSLATION: K");
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <OLED_Handler+0x318>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fa26 	bl	8000c70 <bb_display1>
 8000824:	e109      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'L') || rx_letter == 'l') {
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <OLED_Handler+0x2ec>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b4c      	cmp	r3, #76	; 0x4c
 800082e:	d004      	beq.n	800083a <OLED_Handler+0x176>
 8000830:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <OLED_Handler+0x2ec>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b6c      	cmp	r3, #108	; 0x6c
 8000838:	d104      	bne.n	8000844 <OLED_Handler+0x180>
			bb_display1("TRANSLATION: L");
 800083a:	4b69      	ldr	r3, [pc, #420]	; (80009e0 <OLED_Handler+0x31c>)
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fa17 	bl	8000c70 <bb_display1>
 8000842:	e0fa      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'M') || rx_letter == 'm') {
 8000844:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <OLED_Handler+0x2ec>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b4d      	cmp	r3, #77	; 0x4d
 800084c:	d004      	beq.n	8000858 <OLED_Handler+0x194>
 800084e:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <OLED_Handler+0x2ec>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b6d      	cmp	r3, #109	; 0x6d
 8000856:	d104      	bne.n	8000862 <OLED_Handler+0x19e>
			bb_display1("TRANSLATION: M");
 8000858:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <OLED_Handler+0x320>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fa08 	bl	8000c70 <bb_display1>
 8000860:	e0eb      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'N') || rx_letter == 'n') {
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <OLED_Handler+0x2ec>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b4e      	cmp	r3, #78	; 0x4e
 800086a:	d004      	beq.n	8000876 <OLED_Handler+0x1b2>
 800086c:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <OLED_Handler+0x2ec>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b6e      	cmp	r3, #110	; 0x6e
 8000874:	d104      	bne.n	8000880 <OLED_Handler+0x1bc>
			bb_display1("TRANSLATION: N");
 8000876:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <OLED_Handler+0x324>)
 8000878:	0018      	movs	r0, r3
 800087a:	f000 f9f9 	bl	8000c70 <bb_display1>
 800087e:	e0dc      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'O') || rx_letter == 'o') {
 8000880:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <OLED_Handler+0x2ec>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b4f      	cmp	r3, #79	; 0x4f
 8000888:	d004      	beq.n	8000894 <OLED_Handler+0x1d0>
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <OLED_Handler+0x2ec>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b6f      	cmp	r3, #111	; 0x6f
 8000892:	d104      	bne.n	800089e <OLED_Handler+0x1da>
			bb_display1("TRANSLATION: O");
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <OLED_Handler+0x328>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f9ea 	bl	8000c70 <bb_display1>
 800089c:	e0cd      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'P') || rx_letter == 'p') {
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <OLED_Handler+0x2ec>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b50      	cmp	r3, #80	; 0x50
 80008a6:	d004      	beq.n	80008b2 <OLED_Handler+0x1ee>
 80008a8:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <OLED_Handler+0x2ec>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b70      	cmp	r3, #112	; 0x70
 80008b0:	d104      	bne.n	80008bc <OLED_Handler+0x1f8>
			bb_display1("TRANSLATION: P");
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <OLED_Handler+0x32c>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 f9db 	bl	8000c70 <bb_display1>
 80008ba:	e0be      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'Q') || rx_letter == 'q') {
 80008bc:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <OLED_Handler+0x2ec>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b51      	cmp	r3, #81	; 0x51
 80008c4:	d004      	beq.n	80008d0 <OLED_Handler+0x20c>
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <OLED_Handler+0x2ec>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b71      	cmp	r3, #113	; 0x71
 80008ce:	d104      	bne.n	80008da <OLED_Handler+0x216>
			bb_display1("TRANSLATION: Q");
 80008d0:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <OLED_Handler+0x330>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 f9cc 	bl	8000c70 <bb_display1>
 80008d8:	e0af      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'R') || rx_letter == 'r') {
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <OLED_Handler+0x2ec>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b52      	cmp	r3, #82	; 0x52
 80008e2:	d004      	beq.n	80008ee <OLED_Handler+0x22a>
 80008e4:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <OLED_Handler+0x2ec>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b72      	cmp	r3, #114	; 0x72
 80008ec:	d104      	bne.n	80008f8 <OLED_Handler+0x234>
			bb_display1("TRANSLATION: R");
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <OLED_Handler+0x334>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f9bd 	bl	8000c70 <bb_display1>
 80008f6:	e0a0      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'S') || rx_letter == 's') {
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <OLED_Handler+0x2ec>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b53      	cmp	r3, #83	; 0x53
 8000900:	d004      	beq.n	800090c <OLED_Handler+0x248>
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <OLED_Handler+0x2ec>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b73      	cmp	r3, #115	; 0x73
 800090a:	d104      	bne.n	8000916 <OLED_Handler+0x252>
			bb_display1("TRANSLATION: S");
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <OLED_Handler+0x338>)
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f9ae 	bl	8000c70 <bb_display1>
 8000914:	e091      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'T') || rx_letter == 't') {
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <OLED_Handler+0x2ec>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b54      	cmp	r3, #84	; 0x54
 800091e:	d004      	beq.n	800092a <OLED_Handler+0x266>
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <OLED_Handler+0x2ec>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b74      	cmp	r3, #116	; 0x74
 8000928:	d104      	bne.n	8000934 <OLED_Handler+0x270>
			bb_display1("TRANSLATION: T");
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <OLED_Handler+0x33c>)
 800092c:	0018      	movs	r0, r3
 800092e:	f000 f99f 	bl	8000c70 <bb_display1>
 8000932:	e082      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'U') || rx_letter == 'u') {
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <OLED_Handler+0x2ec>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b55      	cmp	r3, #85	; 0x55
 800093c:	d004      	beq.n	8000948 <OLED_Handler+0x284>
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <OLED_Handler+0x2ec>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b75      	cmp	r3, #117	; 0x75
 8000946:	d104      	bne.n	8000952 <OLED_Handler+0x28e>
			bb_display1("TRANSLATION: U");
 8000948:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <OLED_Handler+0x340>)
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f990 	bl	8000c70 <bb_display1>
 8000950:	e073      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'V') || rx_letter == 'v') {
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <OLED_Handler+0x2ec>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b56      	cmp	r3, #86	; 0x56
 800095a:	d004      	beq.n	8000966 <OLED_Handler+0x2a2>
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <OLED_Handler+0x2ec>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b76      	cmp	r3, #118	; 0x76
 8000964:	d104      	bne.n	8000970 <OLED_Handler+0x2ac>
			bb_display1("TRANSLATION: V");
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <OLED_Handler+0x344>)
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f981 	bl	8000c70 <bb_display1>
 800096e:	e064      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'W') || rx_letter == 'w') {
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <OLED_Handler+0x2ec>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b57      	cmp	r3, #87	; 0x57
 8000978:	d004      	beq.n	8000984 <OLED_Handler+0x2c0>
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <OLED_Handler+0x2ec>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b77      	cmp	r3, #119	; 0x77
 8000982:	d104      	bne.n	800098e <OLED_Handler+0x2ca>
			bb_display1("TRANSLATION: W");
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <OLED_Handler+0x348>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f972 	bl	8000c70 <bb_display1>
 800098c:	e055      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else if ((rx_letter == 'X') || rx_letter == 'x') {
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <OLED_Handler+0x2ec>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b58      	cmp	r3, #88	; 0x58
 8000996:	d004      	beq.n	80009a2 <OLED_Handler+0x2de>
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <OLED_Handler+0x2ec>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b78      	cmp	r3, #120	; 0x78
 80009a0:	d138      	bne.n	8000a14 <OLED_Handler+0x350>
			bb_display1("TRANSLATION: X");
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <OLED_Handler+0x34c>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 f963 	bl	8000c70 <bb_display1>
 80009aa:	e046      	b.n	8000a3a <OLED_Handler+0x376>
 80009ac:	40004400 	.word	0x40004400
 80009b0:	200076da 	.word	0x200076da
 80009b4:	20000004 	.word	0x20000004
 80009b8:	0800319c 	.word	0x0800319c
 80009bc:	080031ac 	.word	0x080031ac
 80009c0:	080031bc 	.word	0x080031bc
 80009c4:	080031cc 	.word	0x080031cc
 80009c8:	080031dc 	.word	0x080031dc
 80009cc:	080031ec 	.word	0x080031ec
 80009d0:	080031fc 	.word	0x080031fc
 80009d4:	0800320c 	.word	0x0800320c
 80009d8:	0800321c 	.word	0x0800321c
 80009dc:	0800322c 	.word	0x0800322c
 80009e0:	0800323c 	.word	0x0800323c
 80009e4:	0800324c 	.word	0x0800324c
 80009e8:	0800325c 	.word	0x0800325c
 80009ec:	0800326c 	.word	0x0800326c
 80009f0:	0800327c 	.word	0x0800327c
 80009f4:	0800328c 	.word	0x0800328c
 80009f8:	0800329c 	.word	0x0800329c
 80009fc:	080032ac 	.word	0x080032ac
 8000a00:	080032bc 	.word	0x080032bc
 8000a04:	080032cc 	.word	0x080032cc
 8000a08:	080032dc 	.word	0x080032dc
 8000a0c:	080032ec 	.word	0x080032ec
 8000a10:	080032fc 	.word	0x080032fc
		}
		else if ((rx_letter == 'Y') || rx_letter == 'y') {
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <OLED_Handler+0x3a8>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b59      	cmp	r3, #89	; 0x59
 8000a1c:	d004      	beq.n	8000a28 <OLED_Handler+0x364>
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <OLED_Handler+0x3a8>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b79      	cmp	r3, #121	; 0x79
 8000a26:	d104      	bne.n	8000a32 <OLED_Handler+0x36e>
			bb_display1("TRANSLATION: Y");
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <OLED_Handler+0x3ac>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f920 	bl	8000c70 <bb_display1>
 8000a30:	e003      	b.n	8000a3a <OLED_Handler+0x376>
		}
		else {
			bb_display1("INVALID LETTER");
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <OLED_Handler+0x3b0>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f91b 	bl	8000c70 <bb_display1>
		}
	}

	// Handle overrun and framing errors
	if (USART2->ISR & USART_ISR_ORE) {
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4013      	ands	r3, r2
 8000a42:	d005      	beq.n	8000a50 <OLED_Handler+0x38c>
		USART2->ICR |= USART_ICR_ORECF;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a46:	6a1a      	ldr	r2, [r3, #32]
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a4a:	2108      	movs	r1, #8
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	621a      	str	r2, [r3, #32]
	}
	if (USART2->ISR & USART_ISR_FE) {
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	2202      	movs	r2, #2
 8000a56:	4013      	ands	r3, r2
 8000a58:	d005      	beq.n	8000a66 <OLED_Handler+0x3a2>
		USART2->ICR |= USART_ICR_FECF;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a5c:	6a1a      	ldr	r2, [r3, #32]
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <OLED_Handler+0x3b4>)
 8000a60:	2102      	movs	r1, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	621a      	str	r2, [r3, #32]
	}

}
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	200076da 	.word	0x200076da
 8000a70:	0800330c 	.word	0x0800330c
 8000a74:	0800331c 	.word	0x0800331c
 8000a78:	40004400 	.word	0x40004400

08000a7c <setup_bb>:
// bb_data(), bb_init_oled(), bb_display1()
//
// Initialize and execute LCD OLED display
//============================================================================

void setup_bb(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <setup_bb+0x40>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <setup_bb+0x40>)
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	02c9      	lsls	r1, r1, #11
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	615a      	str	r2, [r3, #20]
	//GPIOB->MODER &= 0x0;
	GPIOB->MODER |= GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <setup_bb+0x44>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <setup_bb+0x44>)
 8000a94:	218a      	movs	r1, #138	; 0x8a
 8000a96:	05c9      	lsls	r1, r1, #23
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
	//GPIOB->MODER |= 0xB000;

	// Initialize the ODR so that NSS (PB12) is high and SCK (PB13) is low
	GPIOB->ODR |= GPIO_ODR_12;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <setup_bb+0x44>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <setup_bb+0x44>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0149      	lsls	r1, r1, #5
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~GPIO_ODR_13;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <setup_bb+0x44>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <setup_bb+0x44>)
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <setup_bb+0x48>)
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	615a      	str	r2, [r3, #20]
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	ffffdfff 	.word	0xffffdfff

08000ac8 <small_delay>:

void small_delay(int t){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	nano_wait(t);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fbaa 	bl	800022c <nano_wait>
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <bb_write_bit>:


void bb_write_bit(int bit){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

	// Set the MOSI pin to the value of the parameter (0 or 1)
	if (bit) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <bb_write_bit+0x18>
		GPIOB->BSRR = GPIO_BSRR_BS_15;  // Set MOSI (PB15) to 1
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <bb_write_bit+0x4c>)
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0212      	lsls	r2, r2, #8
 8000af4:	619a      	str	r2, [r3, #24]
 8000af6:	e003      	b.n	8000b00 <bb_write_bit+0x20>
	}
	else {
		GPIOB->BSRR = GPIO_BSRR_BR_15;  // Clear MOSI (PB15) to 0
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <bb_write_bit+0x4c>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0612      	lsls	r2, r2, #24
 8000afe:	619a      	str	r2, [r3, #24]
	}

	small_delay(wait);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <bb_write_bit+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ffdf 	bl	8000ac8 <small_delay>

	// Set the SCK pin to high
	GPIOB->BSRR = GPIO_BSRR_BS_13;  // Set SCK (PB13) to high
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <bb_write_bit+0x4c>)
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	619a      	str	r2, [r3, #24]

	small_delay(wait);
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <bb_write_bit+0x50>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff ffd6 	bl	8000ac8 <small_delay>

	// Set the SCK pin to low
	GPIOB->BSRR = GPIO_BSRR_BR_13;  // Clear SCK (PB13) to low
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <bb_write_bit+0x4c>)
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0592      	lsls	r2, r2, #22
 8000b22:	619a      	str	r2, [r3, #24]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	20000000 	.word	0x20000000

08000b34 <bb_write_byte>:

void bb_write_byte(int byte){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

	int bit;

	// for 8 bits
	for(int i = 7; i >= 0; i--){
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e00f      	b.n	8000b62 <bb_write_byte+0x2e>

		// get value of LSB
		bit = byte >> i;
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	411a      	asrs	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
		bit = bit & 0x1;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]

		// write bit to LCD
		bb_write_bit(bit);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ffc2 	bl	8000ae0 <bb_write_bit>
	for(int i = 7; i >= 0; i--){
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	daec      	bge.n	8000b42 <bb_write_byte+0xe>
	}
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <bb_cmd>:


void bb_cmd(int cmd){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	// Set the NSS pin low to start an SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BR_12;  // Clear NSS (PB12) to low
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <bb_cmd+0x54>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0552      	lsls	r2, r2, #21
 8000b82:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <bb_cmd+0x58>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff9d 	bl	8000ac8 <small_delay>

	// Send command bits: RS=0 (Register Select), R/W=0 (Write)
	bb_write_bit(0);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ffa6 	bl	8000ae0 <bb_write_bit>
	bb_write_bit(0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ffa3 	bl	8000ae0 <bb_write_bit>

	// Send the command byte
	bb_write_byte(cmd);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ffc9 	bl	8000b34 <bb_write_byte>
	small_delay(wait);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <bb_cmd+0x58>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff8e 	bl	8000ac8 <small_delay>

	// Set the NSS pin high to signal the end of the SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BS_12;  // Set NSS (PB12) to high
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <bb_cmd+0x54>)
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	0152      	lsls	r2, r2, #5
 8000bb2:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <bb_cmd+0x58>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff85 	bl	8000ac8 <small_delay>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <bb_data>:

void bb_data(int data){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

	// Set the NSS pin low to start an SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BR_12;  // Clear NSS (PB12) to low
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <bb_data+0x54>)
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	0552      	lsls	r2, r2, #21
 8000bde:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <bb_data+0x58>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ff6f 	bl	8000ac8 <small_delay>

	// Send command bits: RS=0 (Register Select), R/W=0 (Write)
	bb_write_bit(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff78 	bl	8000ae0 <bb_write_bit>
	bb_write_bit(0);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff75 	bl	8000ae0 <bb_write_bit>

	// Send the command byte
	bb_write_byte(data);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff9b 	bl	8000b34 <bb_write_byte>
	small_delay(wait);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <bb_data+0x58>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff60 	bl	8000ac8 <small_delay>

	// Set the NSS pin high to signal the end of the SPI transfer
	GPIOB->BSRR = GPIO_BSRR_BS_12;  // Set NSS (PB12) to high
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <bb_data+0x54>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	0152      	lsls	r2, r2, #5
 8000c0e:	619a      	str	r2, [r3, #24]
	small_delay(wait);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <bb_data+0x58>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff57 	bl	8000ac8 <small_delay>
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	48000400 	.word	0x48000400
 8000c28:	20000000 	.word	0x20000000

08000c2c <bb_init_oled>:


void bb_init_oled(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

	// Wait for 1 ms for the display to power up and stabilize
	small_delay(2000000);
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <bb_init_oled+0x40>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff48 	bl	8000ac8 <small_delay>

	// Initialize the OLED display with the specified commands
	bb_cmd(0x38);  // Set for 8-bit operation
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f7ff ff9b 	bl	8000b74 <bb_cmd>
	bb_cmd(0x08);  // Turn display off
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f7ff ff98 	bl	8000b74 <bb_cmd>
	bb_cmd(0x01);  // Clear display
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff95 	bl	8000b74 <bb_cmd>

	// Wait for 2 ms for the display to clear
	small_delay(2000000);
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <bb_init_oled+0x40>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff3b 	bl	8000ac8 <small_delay>

	bb_cmd(0x06);  // Set the display to scroll
 8000c52:	2006      	movs	r0, #6
 8000c54:	f7ff ff8e 	bl	8000b74 <bb_cmd>
	bb_cmd(0x02);  // Move the cursor to the home position
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff ff8b 	bl	8000b74 <bb_cmd>
	bb_cmd(0x0C);  // Turn the display on
 8000c5e:	200c      	movs	r0, #12
 8000c60:	f7ff ff88 	bl	8000b74 <bb_cmd>
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	001e8480 	.word	0x001e8480

08000c70 <bb_display1>:


void bb_display1(const char * str){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	bb_cmd(0x02); // move the cursor to the home position
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff ff7b 	bl	8000b74 <bb_cmd>

	int strSize = strlen(str);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fa3f 	bl	8000104 <strlen>
 8000c86:	0003      	movs	r3, r0
 8000c88:	60fb      	str	r3, [r7, #12]
	int firstLine = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < strSize; i++){
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e02d      	b.n	8000cf0 <bb_display1+0x80>
		if(*str != '\0'){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d023      	beq.n	8000ce4 <bb_display1+0x74>
			// Check display lines for overflow
			if (i>0 && i%16==0) {
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dd1b      	ble.n	8000cda <bb_display1+0x6a>
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d117      	bne.n	8000cda <bb_display1+0x6a>
				// Move to second line of display
				if (firstLine==1) {
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <bb_display1+0x4c>
					firstLine = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
					bb_cmd(0x80 | 0x40);
 8000cb4:	20c0      	movs	r0, #192	; 0xc0
 8000cb6:	f7ff ff5d 	bl	8000b74 <bb_cmd>
 8000cba:	e007      	b.n	8000ccc <bb_display1+0x5c>
				}
				// Clear display and move to first line
				else {
					firstLine = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
					bb_cmd(0x01);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff ff57 	bl	8000b74 <bb_cmd>
					bb_cmd(0x02);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ff54 	bl	8000b74 <bb_cmd>
				}
				// Skip space if starting line
				if (*str == 32) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b20      	cmp	r3, #32
 8000cd2:	d102      	bne.n	8000cda <bb_display1+0x6a>
					str++;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
				}
			}
			// Write character
			bb_data(*str);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff ff76 	bl	8000bd0 <bb_data>
		}
		str++;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < strSize; i++){
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	3301      	adds	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbcd      	blt.n	8000c94 <bb_display1+0x24>
	}
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <bb_clear_display>:

void bb_clear_display(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	// Clear OLED display
	bb_cmd(0x01);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff33 	bl	8000b74 <bb_cmd>

	// Wait for 2 ms for the display to clear
	small_delay(2000000);
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <bb_clear_display+0x20>)
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff fed9 	bl	8000ac8 <small_delay>

	// Move the cursor to the home position
	bb_cmd(0x02);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff ff2c 	bl	8000b74 <bb_cmd>
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	001e8480 	.word	0x001e8480

08000d28 <software_reset>:

void software_reset(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  // Set the system reset request bit
  HAL_NVIC_SystemReset();
 8000d2c:	f000 fa63 	bl	80011f6 <HAL_NVIC_SystemReset>
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3a:	b672      	cpsid	i
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x44>)
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	619a      	str	r2, [r3, #24]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x44>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x44>)
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x44>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0549      	lsls	r1, r1, #21
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	61da      	str	r2, [r3, #28]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_MspInit+0x44>)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	055b      	lsls	r3, r3, #21
 8000d74:	4013      	ands	r3, r2
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	2414      	movs	r4, #20
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2314      	movs	r3, #20
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f002 f9b8 	bl	8003110 <memset>
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <HAL_SPI_MspInit+0x90>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d132      	bne.n	8000e10 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	0149      	lsls	r1, r1, #5
 8000db4:	430a      	orrs	r2, r1
 8000db6:	619a      	str	r2, [r3, #24]
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dba:	699a      	ldr	r2, [r3, #24]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0289      	lsls	r1, r1, #10
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	0021      	movs	r1, r4
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	22e0      	movs	r2, #224	; 0xe0
 8000de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	187a      	adds	r2, r7, r1
 8000e04:	2390      	movs	r3, #144	; 0x90
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fa04 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b00b      	add	sp, #44	; 0x2c
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b08d      	sub	sp, #52	; 0x34
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	241c      	movs	r4, #28
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	2314      	movs	r3, #20
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f002 f96c 	bl	8003110 <memset>
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a38      	ldr	r2, [pc, #224]	; (8000f20 <HAL_UART_MspInit+0x100>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d133      	bne.n	8000eaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e44:	69da      	ldr	r2, [r3, #28]
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0289      	lsls	r1, r1, #10
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	61da      	str	r2, [r3, #28]
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e52:	69da      	ldr	r2, [r3, #28]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0289      	lsls	r1, r1, #10
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7a:	0021      	movs	r1, r4
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2203      	movs	r2, #3
 8000e92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	2390      	movs	r3, #144	; 0x90
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 f9b8 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	e036      	b.n	8000f18 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <HAL_UART_MspInit+0x108>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d131      	bne.n	8000f18 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	02c9      	lsls	r1, r1, #11
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	02db      	lsls	r3, r3, #11
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	0309      	lsls	r1, r1, #12
 8000eda:	430a      	orrs	r2, r1
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x104>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	031b      	lsls	r3, r3, #12
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eec:	211c      	movs	r1, #28
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2230      	movs	r2, #48	; 0x30
 8000ef2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2203      	movs	r2, #3
 8000f04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_UART_MspInit+0x10c>)
 8000f10:	0019      	movs	r1, r3
 8000f12:	0010      	movs	r0, r2
 8000f14:	f000 f980 	bl	8001218 <HAL_GPIO_Init>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b00d      	add	sp, #52	; 0x34
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	48000800 	.word	0x48000800

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f87a 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f7ff fff7 	bl	8000f5e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f96:	f002 f8c3 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff f953 	bl	8000244 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fac:	0800336c 	.word	0x0800336c
  ldr r2, =_sbss
 8000fb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fb4:	200076e0 	.word	0x200076e0

08000fb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_COMP_IRQHandler>
	...

08000fbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_Init+0x24>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_Init+0x24>)
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f809 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff feb5 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x5c>)
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_InitTick+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	23fa      	movs	r3, #250	; 0xfa
 8000ff8:	0098      	lsls	r0, r3, #2
 8000ffa:	f7ff f88b 	bl	8000114 <__udivsi3>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0019      	movs	r1, r3
 8001002:	0020      	movs	r0, r4
 8001004:	f7ff f886 	bl	8000114 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f8f7 	bl	80011fe <HAL_SYSTICK_Config>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e00f      	b.n	8001038 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d80b      	bhi.n	8001036 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f8d0 	bl	80011cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_InitTick+0x64>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b003      	add	sp, #12
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	20000008 	.word	0x20000008
 8001044:	20000010 	.word	0x20000010
 8001048:	2000000c 	.word	0x2000000c

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	18d2      	adds	r2, r2, r3
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000010 	.word	0x20000010
 800106c:	200076dc 	.word	0x200076dc

08001070 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	200076dc 	.word	0x200076dc

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b7f      	cmp	r3, #127	; 0x7f
 8001098:	d828      	bhi.n	80010ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <__NVIC_SetPriority+0xd4>)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	33c0      	adds	r3, #192	; 0xc0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	589b      	ldr	r3, [r3, r2]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	; 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <__NVIC_SetPriority+0xd4>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	430a      	orrs	r2, r1
 80010e4:	33c0      	adds	r3, #192	; 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ea:	e031      	b.n	8001150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <__NVIC_SetPriority+0xd8>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
 80010f4:	230f      	movs	r3, #15
 80010f6:	400b      	ands	r3, r1
 80010f8:	3b08      	subs	r3, #8
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3306      	adds	r3, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1dfa      	adds	r2, r7, #7
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	0011      	movs	r1, r2
 800110c:	2203      	movs	r2, #3
 800110e:	400a      	ands	r2, r1
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	21ff      	movs	r1, #255	; 0xff
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	43d2      	mvns	r2, r2
 800111a:	401a      	ands	r2, r3
 800111c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	401a      	ands	r2, r3
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4003      	ands	r3, r0
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	001c      	movs	r4, r3
 800113c:	230f      	movs	r3, #15
 800113e:	4023      	ands	r3, r4
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	430a      	orrs	r2, r1
 8001146:	3306      	adds	r3, #6
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	18c3      	adds	r3, r0, r3
 800114c:	3304      	adds	r3, #4
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001164:	f3bf 8f4f 	dsb	sy
}
 8001168:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_SystemReset+0x1c>)
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SystemReset+0x20>)
 800116e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
}
 8001174:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	e7fd      	b.n	8001176 <__NVIC_SystemReset+0x16>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0004 	.word	0x05fa0004

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	045b      	lsls	r3, r3, #17
 8001194:	429a      	cmp	r2, r3
 8001196:	d301      	bcc.n	800119c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001198:	2301      	movs	r3, #1
 800119a:	e010      	b.n	80011be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <SysTick_Config+0x44>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	3a01      	subs	r2, #1
 80011a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2103      	movs	r1, #3
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff6a 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x44>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x44>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	210f      	movs	r1, #15
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	1c02      	adds	r2, r0, #0
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ff4b 	bl	8001084 <__NVIC_SetPriority>
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80011fa:	f7ff ffb1 	bl	8001160 <__NVIC_SystemReset>

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffbb 	bl	8001184 <SysTick_Config>
 800120e:	0003      	movs	r3, r0
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e155      	b.n	80014d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x28>
 800123e:	e146      	b.n	80014ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2107      	movs	r1, #7
 800132e:	400b      	ands	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x174>
 800138a:	e0a0      	b.n	80014ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2201      	movs	r2, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	589b      	ldr	r3, [r3, r2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2390      	movs	r3, #144	; 0x90
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a47      	ldr	r2, [pc, #284]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x1ea>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a46      	ldr	r2, [pc, #280]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x1e6>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a45      	ldr	r2, [pc, #276]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a44      	ldr	r2, [pc, #272]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x1de>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x1f0>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x1f0>
 8001406:	2300      	movs	r3, #0
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	2103      	movs	r1, #3
 800140c:	400a      	ands	r2, r1
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	035b      	lsls	r3, r3, #13
 800143e:	4013      	ands	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	039b      	lsls	r3, r3, #14
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43da      	mvns	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	4013      	ands	r3, r2
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	40da      	lsrs	r2, r3
 80014dc:	1e13      	subs	r3, r2, #0
 80014de:	d000      	beq.n	80014e2 <HAL_GPIO_Init+0x2ca>
 80014e0:	e6a2      	b.n	8001228 <HAL_GPIO_Init+0x10>
  } 
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b006      	add	sp, #24
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	0008      	movs	r0, r1
 8001512:	0011      	movs	r1, r2
 8001514:	1cbb      	adds	r3, r7, #2
 8001516:	1c02      	adds	r2, r0, #0
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	1c7b      	adds	r3, r7, #1
 800151c:	1c0a      	adds	r2, r1, #0
 800151e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	1c7b      	adds	r3, r7, #1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001528:	1cbb      	adds	r3, r7, #2
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e003      	b.n	800153a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	1cbb      	adds	r3, r7, #2
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f000 fb76 	bl	8001c44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d100      	bne.n	8001564 <HAL_RCC_OscConfig+0x20>
 8001562:	e08e      	b.n	8001682 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001564:	4bc5      	ldr	r3, [pc, #788]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	220c      	movs	r2, #12
 800156a:	4013      	ands	r3, r2
 800156c:	2b04      	cmp	r3, #4
 800156e:	d00e      	beq.n	800158e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001570:	4bc2      	ldr	r3, [pc, #776]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	220c      	movs	r2, #12
 8001576:	4013      	ands	r3, r2
 8001578:	2b08      	cmp	r3, #8
 800157a:	d117      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
 800157c:	4bbf      	ldr	r3, [pc, #764]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	401a      	ands	r2, r3
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	025b      	lsls	r3, r3, #9
 800158a:	429a      	cmp	r2, r3
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158e:	4bbb      	ldr	r3, [pc, #748]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x58>
 800159a:	e071      	b.n	8001680 <HAL_RCC_OscConfig+0x13c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d000      	beq.n	80015a6 <HAL_RCC_OscConfig+0x62>
 80015a4:	e06c      	b.n	8001680 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 fb4c 	bl	8001c44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x80>
 80015b4:	4bb1      	ldr	r3, [pc, #708]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4bb0      	ldr	r3, [pc, #704]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0249      	lsls	r1, r1, #9
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e02f      	b.n	8001624 <HAL_RCC_OscConfig+0xe0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0xa2>
 80015cc:	4bab      	ldr	r3, [pc, #684]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4baa      	ldr	r3, [pc, #680]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015d2:	49ab      	ldr	r1, [pc, #684]	; (8001880 <HAL_RCC_OscConfig+0x33c>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4ba8      	ldr	r3, [pc, #672]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4ba7      	ldr	r3, [pc, #668]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015de:	49a9      	ldr	r1, [pc, #676]	; (8001884 <HAL_RCC_OscConfig+0x340>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e01e      	b.n	8001624 <HAL_RCC_OscConfig+0xe0>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0xc8>
 80015ee:	4ba3      	ldr	r3, [pc, #652]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4ba2      	ldr	r3, [pc, #648]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	02c9      	lsls	r1, r1, #11
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4b9f      	ldr	r3, [pc, #636]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b9e      	ldr	r3, [pc, #632]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0249      	lsls	r1, r1, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xe0>
 800160c:	4b9b      	ldr	r3, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b9a      	ldr	r3, [pc, #616]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001612:	499b      	ldr	r1, [pc, #620]	; (8001880 <HAL_RCC_OscConfig+0x33c>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	4b98      	ldr	r3, [pc, #608]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b97      	ldr	r3, [pc, #604]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800161e:	4999      	ldr	r1, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x340>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d014      	beq.n	8001656 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fd20 	bl	8001070 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001636:	f7ff fd1b 	bl	8001070 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e2fd      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001648:	4b8c      	ldr	r3, [pc, #560]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	4013      	ands	r3, r2
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0xf2>
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fd0b 	bl	8001070 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fd06 	bl	8001070 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2e8      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b82      	ldr	r3, [pc, #520]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	4013      	ands	r3, r2
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x11c>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x14a>
 800168c:	e06c      	b.n	8001768 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168e:	4b7b      	ldr	r3, [pc, #492]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	220c      	movs	r2, #12
 8001694:	4013      	ands	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	220c      	movs	r2, #12
 800169e:	4013      	ands	r3, r2
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d11f      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1a0>
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	401a      	ands	r2, r3
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x188>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e2bb      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b6b      	ldr	r3, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	22f8      	movs	r2, #248	; 0xf8
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00da      	lsls	r2, r3, #3
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e041      	b.n	8001768 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d024      	beq.n	8001736 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fcba 	bl	8001070 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fcb5 	bl	8001070 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e297      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d0f1      	beq.n	8001702 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	22f8      	movs	r2, #248	; 0xf8
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00da      	lsls	r2, r3, #3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b51      	ldr	r3, [pc, #324]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fc95 	bl	8001070 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fc90 	bl	8001070 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e272      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d1f1      	bne.n	800174c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2208      	movs	r2, #8
 800176e:	4013      	ands	r3, r2
 8001770:	d036      	beq.n	80017e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d019      	beq.n	80017ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800177c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fc73 	bl	8001070 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc6e 	bl	8001070 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e250      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f1      	beq.n	8001790 <HAL_RCC_OscConfig+0x24c>
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fc59 	bl	8001070 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc54 	bl	8001070 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e236      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f1      	bne.n	80017c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2204      	movs	r2, #4
 80017e6:	4013      	ands	r3, r2
 80017e8:	d100      	bne.n	80017ec <HAL_RCC_OscConfig+0x2a8>
 80017ea:	e0b5      	b.n	8001958 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	201f      	movs	r0, #31
 80017ee:	183b      	adds	r3, r7, r0
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x338>)
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	055b      	lsls	r3, r3, #21
 80017fc:	4013      	ands	r3, r2
 80017fe:	d110      	bne.n	8001822 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0549      	lsls	r1, r1, #21
 800180a:	430a      	orrs	r2, r1
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	055b      	lsls	r3, r3, #21
 8001816:	4013      	ands	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800181c:	183b      	adds	r3, r7, r0
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_OscConfig+0x344>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4013      	ands	r3, r2
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_RCC_OscConfig+0x344>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x344>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0049      	lsls	r1, r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff fc18 	bl	8001070 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fc13 	bl	8001070 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1f5      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x344>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10f      	bne.n	800188c <HAL_RCC_OscConfig+0x348>
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	e036      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a4>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	fffeffff 	.word	0xfffeffff
 8001884:	fffbffff 	.word	0xfffbffff
 8001888:	40007000 	.word	0x40007000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x36a>
 8001894:	4bca      	ldr	r3, [pc, #808]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4bc9      	ldr	r3, [pc, #804]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	4bc7      	ldr	r3, [pc, #796]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4bc6      	ldr	r3, [pc, #792]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	621a      	str	r2, [r3, #32]
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x38c>
 80018b6:	4bc2      	ldr	r3, [pc, #776]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4bc1      	ldr	r3, [pc, #772]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	4bbf      	ldr	r3, [pc, #764]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4bbe      	ldr	r3, [pc, #760]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a4>
 80018d0:	4bbb      	ldr	r3, [pc, #748]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4bba      	ldr	r3, [pc, #744]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
 80018dc:	4bb8      	ldr	r3, [pc, #736]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4bb7      	ldr	r3, [pc, #732]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	2104      	movs	r1, #4
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d014      	beq.n	800191a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fbbe 	bl	8001070 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e009      	b.n	800190e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fbb9 	bl	8001070 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4aaf      	ldr	r2, [pc, #700]	; (8001bc4 <HAL_RCC_OscConfig+0x680>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e19a      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	4bac      	ldr	r3, [pc, #688]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x3b6>
 8001918:	e013      	b.n	8001942 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fba9 	bl	8001070 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fba4 	bl	8001070 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4aa5      	ldr	r2, [pc, #660]	; (8001bc4 <HAL_RCC_OscConfig+0x680>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e185      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	4ba1      	ldr	r3, [pc, #644]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001942:	231f      	movs	r3, #31
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b9c      	ldr	r3, [pc, #624]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	4b9b      	ldr	r3, [pc, #620]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001952:	499d      	ldr	r1, [pc, #628]	; (8001bc8 <HAL_RCC_OscConfig+0x684>)
 8001954:	400a      	ands	r2, r1
 8001956:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12a      	bne.n	80019c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800196a:	4b95      	ldr	r3, [pc, #596]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001970:	2104      	movs	r1, #4
 8001972:	430a      	orrs	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001976:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 800197c:	2101      	movs	r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fb75 	bl	8001070 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800198c:	f7ff fb70 	bl	8001070 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e152      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019a8:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	22f8      	movs	r2, #248	; 0xf8
 80019ae:	4393      	bics	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e034      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	3305      	adds	r3, #5
 80019c6:	d111      	bne.n	80019ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019c8:	4b7d      	ldr	r3, [pc, #500]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019d4:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	22f8      	movs	r2, #248	; 0xf8
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	00da      	lsls	r2, r3, #3
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ec:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	430a      	orrs	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019f8:	4b71      	ldr	r3, [pc, #452]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fb34 	bl	8001070 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0e:	f7ff fb2f 	bl	8001070 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e111      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a20:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	4013      	ands	r3, r2
 8001a32:	d05c      	beq.n	8001aee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a34:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d00e      	beq.n	8001a5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a40:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	220c      	movs	r2, #12
 8001a46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d114      	bne.n	8001a76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	025b      	lsls	r3, r3, #9
 8001a54:	401a      	ands	r2, r3
 8001a56:	23c0      	movs	r3, #192	; 0xc0
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	4013      	ands	r3, r2
 8001a68:	d040      	beq.n	8001aec <HAL_RCC_OscConfig+0x5a8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d03c      	beq.n	8001aec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0e6      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a82:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0249      	lsls	r1, r1, #9
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff faf0 	bl	8001070 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a96:	f7ff faeb 	bl	8001070 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0cd      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001aa8:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x552>
 8001ab4:	e01b      	b.n	8001aee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	4943      	ldr	r1, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001abe:	400a      	ands	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fad5 	bl	8001070 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001acc:	f7ff fad0 	bl	8001070 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b2      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x588>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001aec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d100      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5b4>
 8001af6:	e0a4      	b.n	8001c42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x5c2>
 8001b04:	e078      	b.n	8001bf8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d14c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	492e      	ldr	r1, [pc, #184]	; (8001bd0 <HAL_RCC_OscConfig+0x68c>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff faa9 	bl	8001070 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff faa4 	bl	8001070 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e086      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	049b      	lsls	r3, r3, #18
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	220f      	movs	r2, #15
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_RCC_OscConfig+0x690>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	0449      	lsls	r1, r1, #17
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fa77 	bl	8001070 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fa72 	bl	8001070 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e054      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	049b      	lsls	r3, r3, #18
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x644>
 8001ba6:	e04c      	b.n	8001c42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <HAL_RCC_OscConfig+0x68c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fa5c 	bl	8001070 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x6a6>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00001388 	.word	0x00001388
 8001bc8:	efffffff 	.word	0xefffffff
 8001bcc:	fffeffff 	.word	0xfffeffff
 8001bd0:	feffffff 	.word	0xfeffffff
 8001bd4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fa4a 	bl	8001070 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e02c      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_RCC_OscConfig+0x708>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	049b      	lsls	r3, r3, #18
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x694>
 8001bf6:	e024      	b.n	8001c42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01f      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x708>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x708>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	23c0      	movs	r3, #192	; 0xc0
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10e      	bne.n	8001c3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	220f      	movs	r2, #15
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	23f0      	movs	r3, #240	; 0xf0
 8001c32:	039b      	lsls	r3, r3, #14
 8001c34:	401a      	ands	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b008      	add	sp, #32
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0bf      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d911      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0a6      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d015      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d006      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cb0:	21e0      	movs	r1, #224	; 0xe0
 8001cb2:	00c9      	lsls	r1, r1, #3
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	22f0      	movs	r2, #240	; 0xf0
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d04c      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d120      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e07a      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	049b      	lsls	r3, r3, #18
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d114      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06e      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	4013      	ands	r3, r2
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e062      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e05b      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7ff f996 	bl	8001070 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4a:	f7ff f991 	bl	8001070 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_RCC_ClockConfig+0x1a4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e042      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	220c      	movs	r2, #12
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1ec      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d211      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x19c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e020      	b.n	8001de4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_RCC_ClockConfig+0x1a8>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc0:	f000 f820 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	220f      	movs	r2, #15
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1ac>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001dda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f7ff f901 	bl	8000fe4 <HAL_InitTick>
  
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	00001388 	.word	0x00001388
 8001df8:	fffff8ff 	.word	0xfffff8ff
 8001dfc:	0800332c 	.word	0x0800332c
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	220c      	movs	r2, #12
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d046      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0xb8>
 8001e2e:	d848      	bhi.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d002      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x36>
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d003      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x3c>
 8001e38:	e043      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e3c:	613b      	str	r3, [r7, #16]
      break;
 8001e3e:	e043      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	220f      	movs	r2, #15
 8001e46:	4013      	ands	r3, r2
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	220f      	movs	r2, #15
 8001e54:	4013      	ands	r3, r2
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	401a      	ands	r2, r3
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d109      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e70:	f7fe f950 	bl	8000114 <__udivsi3>
 8001e74:	0003      	movs	r3, r0
 8001e76:	001a      	movs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4353      	muls	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e01a      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	401a      	ands	r2, r3
 8001e88:	23c0      	movs	r3, #192	; 0xc0
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e94:	f7fe f93e 	bl	8000114 <__udivsi3>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4353      	muls	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ea8:	f7fe f934 	bl	8000114 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	001a      	movs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4353      	muls	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	613b      	str	r3, [r7, #16]
      break;
 8001eba:	e005      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ebe:	613b      	str	r3, [r7, #16]
      break;
 8001ec0:	e002      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ec4:	613b      	str	r3, [r7, #16]
      break;
 8001ec6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ec8:	693b      	ldr	r3, [r7, #16]
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	08003344 	.word	0x08003344
 8001ee0:	08003354 	.word	0x08003354
 8001ee4:	02dc6c00 	.word	0x02dc6c00

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f00:	f7ff fff2 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f04:	0001      	movs	r1, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	4013      	ands	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	40d9      	lsrs	r1, r3
 8001f16:	000b      	movs	r3, r1
}    
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40021000 	.word	0x40021000
 8001f24:	0800333c 	.word	0x0800333c

08001f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f44:	e08e      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2017      	movs	r0, #23
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	4013      	ands	r3, r2
 8001f58:	d110      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0549      	lsls	r1, r1, #21
 8001f64:	430a      	orrs	r2, r1
 8001f66:	61da      	str	r2, [r3, #28]
 8001f68:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	055b      	lsls	r3, r3, #21
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d11a      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f88:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7ff f86b 	bl	8001070 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7ff f866 	bl	8001070 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0a6      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d034      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d02c      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe0:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0249      	lsls	r1, r1, #9
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff8:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffe:	4945      	ldr	r1, [pc, #276]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002000:	400a      	ands	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002004:	4b40      	ldr	r3, [pc, #256]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff f82d 	bl	8001070 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	e009      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7ff f828 	bl	8001070 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	4a3c      	ldr	r2, [pc, #240]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e067      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d0f0      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002040:	4013      	ands	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800204a:	430a      	orrs	r2, r1
 800204c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800204e:	2317      	movs	r3, #23
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205e:	492f      	ldr	r1, [pc, #188]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002060:	400a      	ands	r2, r1
 8002062:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	2203      	movs	r2, #3
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800209c:	430a      	orrs	r2, r1
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	02db      	lsls	r3, r3, #11
 80020a8:	4013      	ands	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	4013      	ands	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	2210      	movs	r2, #16
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	4393      	bics	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b006      	add	sp, #24
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	fffffcff 	.word	0xfffffcff
 8002114:	fffeffff 	.word	0xfffeffff
 8002118:	00001388 	.word	0x00001388
 800211c:	efffffff 	.word	0xefffffff
 8002120:	fffcffff 	.word	0xfffcffff
 8002124:	fff3ffff 	.word	0xfff3ffff

08002128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0a8      	b.n	800228c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2382      	movs	r3, #130	; 0x82
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	429a      	cmp	r2, r3
 800214c:	d009      	beq.n	8002162 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
 8002154:	e005      	b.n	8002162 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	225d      	movs	r2, #93	; 0x5d
 800216c:	5c9b      	ldrb	r3, [r3, r2]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	225c      	movs	r2, #92	; 0x5c
 8002178:	2100      	movs	r1, #0
 800217a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f7fe fe02 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	225d      	movs	r2, #93	; 0x5d
 8002188:	2102      	movs	r1, #2
 800218a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	438a      	bics	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	23e0      	movs	r3, #224	; 0xe0
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d902      	bls.n	80021ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e002      	b.n	80021b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	015b      	lsls	r3, r3, #5
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	23f0      	movs	r3, #240	; 0xf0
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	429a      	cmp	r2, r3
 80021be:	d008      	beq.n	80021d2 <HAL_SPI_Init+0xaa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	23e0      	movs	r3, #224	; 0xe0
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	2382      	movs	r3, #130	; 0x82
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	2384      	movs	r3, #132	; 0x84
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2102      	movs	r1, #2
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2101      	movs	r1, #1
 80021f8:	400b      	ands	r3, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6999      	ldr	r1, [r3, #24]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	400b      	ands	r3, r1
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2138      	movs	r1, #56	; 0x38
 800220e:	400b      	ands	r3, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	400b      	ands	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	0011      	movs	r1, r2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	2204      	movs	r2, #4
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2110      	movs	r1, #16
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	2108      	movs	r1, #8
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	23f0      	movs	r3, #240	; 0xf0
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	400b      	ands	r3, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	0011      	movs	r1, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	401a      	ands	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4907      	ldr	r1, [pc, #28]	; (8002294 <HAL_SPI_Init+0x16c>)
 8002278:	400a      	ands	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	225d      	movs	r2, #93	; 0x5d
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	fffff7ff 	.word	0xfffff7ff

08002298 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	1dbb      	adds	r3, r7, #6
 80022a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022a8:	231f      	movs	r3, #31
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	225c      	movs	r2, #92	; 0x5c
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Transmit+0x26>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e147      	b.n	800254e <HAL_SPI_Transmit+0x2b6>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	225c      	movs	r2, #92	; 0x5c
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c6:	f7fe fed3 	bl	8001070 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022ce:	2316      	movs	r3, #22
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	1dba      	adds	r2, r7, #6
 80022d4:	8812      	ldrh	r2, [r2, #0]
 80022d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	225d      	movs	r2, #93	; 0x5d
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d004      	beq.n	80022ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ec:	e128      	b.n	8002540 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_SPI_Transmit+0x64>
 80022f4:	1dbb      	adds	r3, r7, #6
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022fc:	231f      	movs	r3, #31
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
    goto error;
 8002304:	e11c      	b.n	8002540 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	225d      	movs	r2, #93	; 0x5d
 800230a:	2103      	movs	r1, #3
 800230c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1dba      	adds	r2, r7, #6
 800231e:	8812      	ldrh	r2, [r2, #0]
 8002320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1dba      	adds	r2, r7, #6
 8002326:	8812      	ldrh	r2, [r2, #0]
 8002328:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2244      	movs	r2, #68	; 0x44
 8002334:	2100      	movs	r1, #0
 8002336:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2246      	movs	r2, #70	; 0x46
 800233c:	2100      	movs	r1, #0
 800233e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	429a      	cmp	r2, r3
 8002356:	d110      	bne.n	800237a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2140      	movs	r1, #64	; 0x40
 8002364:	438a      	bics	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	01c9      	lsls	r1, r1, #7
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	4013      	ands	r3, r2
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d007      	beq.n	8002398 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	23e0      	movs	r3, #224	; 0xe0
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d952      	bls.n	800244a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_SPI_Transmit+0x11e>
 80023ac:	2316      	movs	r3, #22
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d143      	bne.n	800243e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023da:	e030      	b.n	800243e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d112      	bne.n	8002410 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800240e:	e016      	b.n	800243e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002410:	f7fe fe2e 	bl	8001070 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d802      	bhi.n	8002426 <HAL_SPI_Transmit+0x18e>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_SPI_Transmit+0x194>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d108      	bne.n	800243e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800242c:	231f      	movs	r3, #31
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2203      	movs	r2, #3
 8002432:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	225d      	movs	r2, #93	; 0x5d
 8002438:	2101      	movs	r1, #1
 800243a:	5499      	strb	r1, [r3, r2]
          goto error;
 800243c:	e080      	b.n	8002540 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1c9      	bne.n	80023dc <HAL_SPI_Transmit+0x144>
 8002448:	e053      	b.n	80024f2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_SPI_Transmit+0x1c4>
 8002452:	2316      	movs	r3, #22
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d145      	bne.n	80024e8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002482:	e031      	b.n	80024e8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d113      	bne.n	80024ba <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b8:	e016      	b.n	80024e8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ba:	f7fe fdd9 	bl	8001070 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d802      	bhi.n	80024d0 <HAL_SPI_Transmit+0x238>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_SPI_Transmit+0x23e>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80024d6:	231f      	movs	r3, #31
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	225d      	movs	r2, #93	; 0x5d
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
          goto error;
 80024e6:	e02b      	b.n	8002540 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1c8      	bne.n	8002484 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	6839      	ldr	r1, [r7, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f95d 	bl	80027b8 <SPI_EndRxTxTransaction>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e003      	b.n	8002540 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	225d      	movs	r2, #93	; 0x5d
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	225c      	movs	r2, #92	; 0x5c
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002548:	231f      	movs	r3, #31
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b008      	add	sp, #32
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002568:	f7fe fd82 	bl	8001070 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002578:	f7fe fd7a 	bl	8001070 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002580:	4b3a      	ldr	r3, [pc, #232]	; (800266c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	015b      	lsls	r3, r3, #5
 8002586:	0d1b      	lsrs	r3, r3, #20
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	4353      	muls	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800258e:	e058      	b.n	8002642 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	d055      	beq.n	8002642 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002596:	f7fe fd6b 	bl	8001070 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d902      	bls.n	80025ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d142      	bne.n	8002632 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	21e0      	movs	r1, #224	; 0xe0
 80025b8:	438a      	bics	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	2382      	movs	r3, #130	; 0x82
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d113      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d005      	beq.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2140      	movs	r1, #64	; 0x40
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	019b      	lsls	r3, r3, #6
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d110      	bne.n	800261e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	0189      	lsls	r1, r1, #6
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	225d      	movs	r2, #93	; 0x5d
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	225c      	movs	r2, #92	; 0x5c
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e017      	b.n	8002662 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3b01      	subs	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	425a      	negs	r2, r3
 8002652:	4153      	adcs	r3, r2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	001a      	movs	r2, r3
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d197      	bne.n	8002590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b008      	add	sp, #32
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	20000008 	.word	0x20000008
 8002670:	ffffdfff 	.word	0xffffdfff

08002674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002682:	2317      	movs	r3, #23
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800268a:	f7fe fcf1 	bl	8001070 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	18d3      	adds	r3, r2, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800269a:	f7fe fce9 	bl	8001070 <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	0013      	movs	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	00da      	lsls	r2, r3, #3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	4353      	muls	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026c0:	e068      	b.n	8002794 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	23c0      	movs	r3, #192	; 0xc0
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10a      	bne.n	80026e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	2117      	movs	r1, #23
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	d055      	beq.n	8002794 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026e8:	f7fe fcc2 	bl	8001070 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d902      	bls.n	80026fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d142      	bne.n	8002784 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	21e0      	movs	r1, #224	; 0xe0
 800270a:	438a      	bics	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	2382      	movs	r3, #130	; 0x82
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	429a      	cmp	r2, r3
 8002718:	d113      	bne.n	8002742 <SPI_WaitFifoStateUntilTimeout+0xce>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	429a      	cmp	r2, r3
 8002724:	d005      	beq.n	8002732 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	429a      	cmp	r2, r3
 8002730:	d107      	bne.n	8002742 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2140      	movs	r1, #64	; 0x40
 800273e:	438a      	bics	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	429a      	cmp	r2, r3
 800274c:	d110      	bne.n	8002770 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0189      	lsls	r1, r1, #6
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	225d      	movs	r2, #93	; 0x5d
 8002774:	2101      	movs	r1, #1
 8002776:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	225c      	movs	r2, #92	; 0x5c
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e010      	b.n	80027a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	3b01      	subs	r3, #1
 8002792:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d18e      	bne.n	80026c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b00a      	add	sp, #40	; 0x28
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	20000008 	.word	0x20000008
 80027b4:	ffffdfff 	.word	0xffffdfff

080027b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	23c0      	movs	r3, #192	; 0xc0
 80027c8:	0159      	lsls	r1, r3, #5
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	0013      	movs	r3, r2
 80027d2:	2200      	movs	r2, #0
 80027d4:	f7ff ff4e 	bl	8002674 <SPI_WaitFifoStateUntilTimeout>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d007      	beq.n	80027ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	2220      	movs	r2, #32
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e027      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	0013      	movs	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	f7ff fead 	bl	8002558 <SPI_WaitFlagStateUntilTimeout>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d007      	beq.n	8002812 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	2220      	movs	r2, #32
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e014      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	23c0      	movs	r3, #192	; 0xc0
 8002816:	00d9      	lsls	r1, r3, #3
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	0013      	movs	r3, r2
 8002820:	2200      	movs	r2, #0
 8002822:	f7ff ff27 	bl	8002674 <SPI_WaitFifoStateUntilTimeout>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d007      	beq.n	800283a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	2220      	movs	r2, #32
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e000      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e044      	b.n	80028e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2278      	movs	r2, #120	; 0x78
 8002862:	2100      	movs	r1, #0
 8002864:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fad9 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f830 	bl	80028ec <UART_SetConfig>
 800288c:	0003      	movs	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e024      	b.n	80028e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fa0b 	bl	8002cbc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	490d      	ldr	r1, [pc, #52]	; (80028e8 <HAL_UART_Init+0xa4>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	212a      	movs	r1, #42	; 0x2a
 80028c2:	438a      	bics	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 faa3 	bl	8002e24 <UART_CheckIdleState>
 80028de:	0003      	movs	r3, r0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	ffffb7ff 	.word	0xffffb7ff

080028ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f4:	231e      	movs	r3, #30
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4abe      	ldr	r2, [pc, #760]	; (8002c14 <UART_SetConfig+0x328>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4ab9      	ldr	r2, [pc, #740]	; (8002c18 <UART_SetConfig+0x32c>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4ab0      	ldr	r2, [pc, #704]	; (8002c1c <UART_SetConfig+0x330>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4aac      	ldr	r2, [pc, #688]	; (8002c20 <UART_SetConfig+0x334>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d127      	bne.n	80029c2 <UART_SetConfig+0xd6>
 8002972:	4bac      	ldr	r3, [pc, #688]	; (8002c24 <UART_SetConfig+0x338>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2203      	movs	r2, #3
 8002978:	4013      	ands	r3, r2
 800297a:	2b03      	cmp	r3, #3
 800297c:	d00d      	beq.n	800299a <UART_SetConfig+0xae>
 800297e:	d81b      	bhi.n	80029b8 <UART_SetConfig+0xcc>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d014      	beq.n	80029ae <UART_SetConfig+0xc2>
 8002984:	d818      	bhi.n	80029b8 <UART_SetConfig+0xcc>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <UART_SetConfig+0xa4>
 800298a:	2b01      	cmp	r3, #1
 800298c:	d00a      	beq.n	80029a4 <UART_SetConfig+0xb8>
 800298e:	e013      	b.n	80029b8 <UART_SetConfig+0xcc>
 8002990:	231f      	movs	r3, #31
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e0bd      	b.n	8002b16 <UART_SetConfig+0x22a>
 800299a:	231f      	movs	r3, #31
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e0b8      	b.n	8002b16 <UART_SetConfig+0x22a>
 80029a4:	231f      	movs	r3, #31
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2204      	movs	r2, #4
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e0b3      	b.n	8002b16 <UART_SetConfig+0x22a>
 80029ae:	231f      	movs	r3, #31
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2208      	movs	r2, #8
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e0ae      	b.n	8002b16 <UART_SetConfig+0x22a>
 80029b8:	231f      	movs	r3, #31
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2210      	movs	r2, #16
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e0a9      	b.n	8002b16 <UART_SetConfig+0x22a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a98      	ldr	r2, [pc, #608]	; (8002c28 <UART_SetConfig+0x33c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d134      	bne.n	8002a36 <UART_SetConfig+0x14a>
 80029cc:	4b95      	ldr	r3, [pc, #596]	; (8002c24 <UART_SetConfig+0x338>)
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	23c0      	movs	r3, #192	; 0xc0
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	22c0      	movs	r2, #192	; 0xc0
 80029d8:	0292      	lsls	r2, r2, #10
 80029da:	4293      	cmp	r3, r2
 80029dc:	d017      	beq.n	8002a0e <UART_SetConfig+0x122>
 80029de:	22c0      	movs	r2, #192	; 0xc0
 80029e0:	0292      	lsls	r2, r2, #10
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d822      	bhi.n	8002a2c <UART_SetConfig+0x140>
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	0292      	lsls	r2, r2, #10
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <UART_SetConfig+0x136>
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	0292      	lsls	r2, r2, #10
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d81a      	bhi.n	8002a2c <UART_SetConfig+0x140>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <UART_SetConfig+0x118>
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	0252      	lsls	r2, r2, #9
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00a      	beq.n	8002a18 <UART_SetConfig+0x12c>
 8002a02:	e013      	b.n	8002a2c <UART_SetConfig+0x140>
 8002a04:	231f      	movs	r3, #31
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e083      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e07e      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a18:	231f      	movs	r3, #31
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e079      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a22:	231f      	movs	r3, #31
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2208      	movs	r2, #8
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e074      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a2c:	231f      	movs	r3, #31
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2210      	movs	r2, #16
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e06f      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <UART_SetConfig+0x340>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d134      	bne.n	8002aaa <UART_SetConfig+0x1be>
 8002a40:	4b78      	ldr	r3, [pc, #480]	; (8002c24 <UART_SetConfig+0x338>)
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	4013      	ands	r3, r2
 8002a4a:	22c0      	movs	r2, #192	; 0xc0
 8002a4c:	0312      	lsls	r2, r2, #12
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d017      	beq.n	8002a82 <UART_SetConfig+0x196>
 8002a52:	22c0      	movs	r2, #192	; 0xc0
 8002a54:	0312      	lsls	r2, r2, #12
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d822      	bhi.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	0312      	lsls	r2, r2, #12
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <UART_SetConfig+0x1aa>
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	0312      	lsls	r2, r2, #12
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d81a      	bhi.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <UART_SetConfig+0x18c>
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	02d2      	lsls	r2, r2, #11
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00a      	beq.n	8002a8c <UART_SetConfig+0x1a0>
 8002a76:	e013      	b.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a78:	231f      	movs	r3, #31
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e049      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a82:	231f      	movs	r3, #31
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e044      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a8c:	231f      	movs	r3, #31
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2204      	movs	r2, #4
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e03f      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002a96:	231f      	movs	r3, #31
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e03a      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002aa0:	231f      	movs	r3, #31
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e035      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a60      	ldr	r2, [pc, #384]	; (8002c30 <UART_SetConfig+0x344>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d104      	bne.n	8002abe <UART_SetConfig+0x1d2>
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e02b      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	; (8002c34 <UART_SetConfig+0x348>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d104      	bne.n	8002ad2 <UART_SetConfig+0x1e6>
 8002ac8:	231f      	movs	r3, #31
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e021      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <UART_SetConfig+0x34c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d104      	bne.n	8002ae6 <UART_SetConfig+0x1fa>
 8002adc:	231f      	movs	r3, #31
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e017      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a54      	ldr	r2, [pc, #336]	; (8002c3c <UART_SetConfig+0x350>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d104      	bne.n	8002afa <UART_SetConfig+0x20e>
 8002af0:	231f      	movs	r3, #31
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e00d      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <UART_SetConfig+0x354>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d104      	bne.n	8002b0e <UART_SetConfig+0x222>
 8002b04:	231f      	movs	r3, #31
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e003      	b.n	8002b16 <UART_SetConfig+0x22a>
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2210      	movs	r2, #16
 8002b14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d15c      	bne.n	8002bdc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d015      	beq.n	8002b58 <UART_SetConfig+0x26c>
 8002b2c:	dc18      	bgt.n	8002b60 <UART_SetConfig+0x274>
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d00d      	beq.n	8002b4e <UART_SetConfig+0x262>
 8002b32:	dc15      	bgt.n	8002b60 <UART_SetConfig+0x274>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <UART_SetConfig+0x252>
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d005      	beq.n	8002b48 <UART_SetConfig+0x25c>
 8002b3c:	e010      	b.n	8002b60 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b3e:	f7ff f9dd 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002b42:	0003      	movs	r3, r0
 8002b44:	61bb      	str	r3, [r7, #24]
        break;
 8002b46:	e012      	b.n	8002b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b48:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <UART_SetConfig+0x358>)
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e00f      	b.n	8002b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b4e:	f7ff f959 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]
        break;
 8002b56:	e00a      	b.n	8002b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	61bb      	str	r3, [r7, #24]
        break;
 8002b5e:	e006      	b.n	8002b6e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b64:	231e      	movs	r3, #30
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
        break;
 8002b6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d100      	bne.n	8002b76 <UART_SetConfig+0x28a>
 8002b74:	e095      	b.n	8002ca2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	005a      	lsls	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	18d2      	adds	r2, r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f7fd fac3 	bl	8000114 <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b0f      	cmp	r3, #15
 8002b96:	d91c      	bls.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d217      	bcs.n	8002bd2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	200e      	movs	r0, #14
 8002ba8:	183b      	adds	r3, r7, r0
 8002baa:	210f      	movs	r1, #15
 8002bac:	438a      	bics	r2, r1
 8002bae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b299      	uxth	r1, r3
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	183a      	adds	r2, r7, r0
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	183a      	adds	r2, r7, r0
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	e067      	b.n	8002ca2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd2:	231e      	movs	r3, #30
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e062      	b.n	8002ca2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bdc:	231f      	movs	r3, #31
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d030      	beq.n	8002c48 <UART_SetConfig+0x35c>
 8002be6:	dc33      	bgt.n	8002c50 <UART_SetConfig+0x364>
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d00d      	beq.n	8002c08 <UART_SetConfig+0x31c>
 8002bec:	dc30      	bgt.n	8002c50 <UART_SetConfig+0x364>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <UART_SetConfig+0x30c>
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d005      	beq.n	8002c02 <UART_SetConfig+0x316>
 8002bf6:	e02b      	b.n	8002c50 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff f980 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	61bb      	str	r3, [r7, #24]
        break;
 8002c00:	e02d      	b.n	8002c5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <UART_SetConfig+0x358>)
 8002c04:	61bb      	str	r3, [r7, #24]
        break;
 8002c06:	e02a      	b.n	8002c5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c08:	f7ff f8fc 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
        break;
 8002c10:	e025      	b.n	8002c5e <UART_SetConfig+0x372>
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	efff69f3 	.word	0xefff69f3
 8002c18:	ffffcfff 	.word	0xffffcfff
 8002c1c:	fffff4ff 	.word	0xfffff4ff
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	40004800 	.word	0x40004800
 8002c30:	40004c00 	.word	0x40004c00
 8002c34:	40005000 	.word	0x40005000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	40011800 	.word	0x40011800
 8002c40:	40011c00 	.word	0x40011c00
 8002c44:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	61bb      	str	r3, [r7, #24]
        break;
 8002c4e:	e006      	b.n	8002c5e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c54:	231e      	movs	r3, #30
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
        break;
 8002c5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01e      	beq.n	8002ca2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	085a      	lsrs	r2, r3, #1
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	18d2      	adds	r2, r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f7fd fa4d 	bl	8000114 <__udivsi3>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d90a      	bls.n	8002c9a <UART_SetConfig+0x3ae>
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	025b      	lsls	r3, r3, #9
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d205      	bcs.n	8002c9a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e003      	b.n	8002ca2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c9a:	231e      	movs	r3, #30
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002cae:	231e      	movs	r3, #30
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b008      	add	sp, #32
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <UART_AdvFeatureConfig+0x144>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d00b      	beq.n	8002d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a43      	ldr	r2, [pc, #268]	; (8002e04 <UART_AdvFeatureConfig+0x148>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <UART_AdvFeatureConfig+0x14c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2208      	movs	r2, #8
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <UART_AdvFeatureConfig+0x150>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2210      	movs	r2, #16
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <UART_AdvFeatureConfig+0x154>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2220      	movs	r2, #32
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <UART_AdvFeatureConfig+0x158>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	4013      	ands	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <UART_AdvFeatureConfig+0x15c>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	035b      	lsls	r3, r3, #13
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10b      	bne.n	8002dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <UART_AdvFeatureConfig+0x160>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <UART_AdvFeatureConfig+0x164>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	fffdffff 	.word	0xfffdffff
 8002e04:	fffeffff 	.word	0xfffeffff
 8002e08:	fffbffff 	.word	0xfffbffff
 8002e0c:	ffff7fff 	.word	0xffff7fff
 8002e10:	ffffefff 	.word	0xffffefff
 8002e14:	ffffdfff 	.word	0xffffdfff
 8002e18:	ffefffff 	.word	0xffefffff
 8002e1c:	ff9fffff 	.word	0xff9fffff
 8002e20:	fff7ffff 	.word	0xfff7ffff

08002e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b092      	sub	sp, #72	; 0x48
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2284      	movs	r2, #132	; 0x84
 8002e30:	2100      	movs	r1, #0
 8002e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e34:	f7fe f91c 	bl	8001070 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2208      	movs	r2, #8
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d12c      	bne.n	8002ea4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	0391      	lsls	r1, r2, #14
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <UART_CheckIdleState+0x148>)
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f000 f88c 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d021      	beq.n	8002ea4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e60:	f3ef 8310 	mrs	r3, PRIMASK
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	438a      	bics	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	f383 8810 	msr	PRIMASK, r3
}
 8002e90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2278      	movs	r2, #120	; 0x78
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e05f      	b.n	8002f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d146      	bne.n	8002f40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	03d1      	lsls	r1, r2, #15
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <UART_CheckIdleState+0x148>)
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f000 f858 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d03b      	beq.n	8002f40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ece:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4921      	ldr	r1, [pc, #132]	; (8002f70 <UART_CheckIdleState+0x14c>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efa:	f3ef 8310 	mrs	r3, PRIMASK
 8002efe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
 8002f04:	2301      	movs	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f383 8810 	msr	PRIMASK, r3
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	2120      	movs	r1, #32
 8002f32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2278      	movs	r2, #120	; 0x78
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e011      	b.n	8002f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2278      	movs	r2, #120	; 0x78
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b010      	add	sp, #64	; 0x40
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	01ffffff 	.word	0x01ffffff
 8002f70:	fffffedf 	.word	0xfffffedf

08002f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	1dfb      	adds	r3, r7, #7
 8002f82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f84:	e04b      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	d048      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe f870 	bl	8001070 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04b      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2204      	movs	r2, #4
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d035      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d111      	bne.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 f83c 	bl	8003048 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2284      	movs	r2, #132	; 0x84
 8002fd4:	2108      	movs	r1, #8
 8002fd6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2278      	movs	r2, #120	; 0x78
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e02c      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	401a      	ands	r2, r3
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d112      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f81f 	bl	8003048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2284      	movs	r2, #132	; 0x84
 800300e:	2120      	movs	r1, #32
 8003010:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2278      	movs	r2, #120	; 0x78
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e00f      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	425a      	negs	r2, r3
 800302e:	4153      	adcs	r3, r2
 8003030:	b2db      	uxtb	r3, r3
 8003032:	001a      	movs	r2, r3
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d0a4      	beq.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08e      	sub	sp, #56	; 0x38
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	617b      	str	r3, [r7, #20]
  return(result);
 8003056:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	2301      	movs	r3, #1
 800305c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4926      	ldr	r1, [pc, #152]	; (800310c <UART_EndRxTransfer+0xc4>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	623b      	str	r3, [r7, #32]
  return(result);
 8003088:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
 800308c:	2301      	movs	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	438a      	bics	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d118      	bne.n	80030ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030bc:	f3ef 8310 	mrs	r3, PRIMASK
 80030c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c6:	2301      	movs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2110      	movs	r1, #16
 80030de:	438a      	bics	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b00e      	add	sp, #56	; 0x38
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	fffffedf 	.word	0xfffffedf

08003110 <memset>:
 8003110:	0003      	movs	r3, r0
 8003112:	1882      	adds	r2, r0, r2
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	7019      	strb	r1, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2600      	movs	r6, #0
 8003124:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x38>)
 8003126:	4d0d      	ldr	r5, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	2600      	movs	r6, #0
 8003132:	f000 f819 	bl	8003168 <_init>
 8003136:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x40>)
 8003138:	4d0a      	ldr	r5, [pc, #40]	; (8003164 <__libc_init_array+0x44>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	00b3      	lsls	r3, r6, #2
 8003146:	58eb      	ldr	r3, [r5, r3]
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	00b3      	lsls	r3, r6, #2
 8003150:	58eb      	ldr	r3, [r5, r3]
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003364 	.word	0x08003364
 800315c:	08003364 	.word	0x08003364
 8003160:	08003368 	.word	0x08003368
 8003164:	08003364 	.word	0x08003364

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
